[
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/chirst/Desktop/Git/corahirst-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                1     \n  factor                   1     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 Cat Breed             0             1   1   2     0        4          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate   mean    sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.   16.0  133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1  21.2   45  55  70  80  110 ▇▂▃▂▂\n3 Cat Age               0             1   6.33  5.10   1   2   5   9   17 ▇▃▃▁▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n# Create a boxplot using the pipe operator\np5 &lt;- mydata %&gt;% ggplot(aes(x = `Cat Breed`, y = Height, fill = `Cat Breed`)) +\n  geom_boxplot(color = \"black\", notch = TRUE) +\n  labs(title = \"Boxplot of Height by Cat Breed\", x = \"Cat Breed\", y = \"Height\") +\n  theme_minimal()\n\n# Save the plot\nfigure_file &lt;- here::here(\"starter-analysis-exercise\", \"results\", \"figures\", \"height-catbreed-boxplot.png\")\nggsave(filename = figure_file, plot=p5)\n\nSaving 7 x 5 in image\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\n\n# Open the saved image in RStudio viewer\n#rstudioapi::viewer(figure_file)\n\n\n# Create a scatterplot using the pipe operator\np6 &lt;- mydata %&gt;%\n  ggplot(aes(x = Weight, y = `Cat Age`, color = `Cat Breed`)) +\n  geom_point(size = 3) +\n  labs(title = \"Scatterplot of Weight vs. Cat Age\", x = \"Weight\", y = \"Cat Age\") +\n  theme_minimal()\n\n# Save the scatterplot\nfigure_file &lt;- here::here(\"starter-analysis-exercise\", \"results\", \"figures\", \"weight-catage-scatterplot.png\")\nggsave(filename = figure_file, plot=p6)\n\nSaving 7 x 5 in image\n\n# View the scatterplot in RStudio viewer\n#rstudioapi::viewer(figure_file)\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "presentation-exercise/questions_for_AI.html",
    "href": "presentation-exercise/questions_for_AI.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "This template demonstrates many of the bells and whistles of the reprex::reprex_document() output format. The YAML sets many options to non-default values, such as using #;-) as the comment in front of output."
  },
  {
    "objectID": "presentation-exercise/questions_for_AI.html#learning-how-to-use-this",
    "href": "presentation-exercise/questions_for_AI.html#learning-how-to-use-this",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "Learning how to use This",
    "text": "Learning how to use This\n\nlibrary(here)\n\nhere() starts at /Users/cora/Desktop/Git/corahirst-MADA-portfolio/presentation-exercise\n\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\ndf = data.frame(x = sample(1:100, 5),\n                y = sample(1:100, 5))\n\n# use ggplot to make a line graph of df\n# and include a yellow box in the middle behind the line that spans from the bottom of the plot to the top of the plot\n# and I want theme_classic but with horizontal gridlines\n\nggplot(df, aes(x, y)) +\n  geom_line() +\n  annotate(\"rect\", xmin = 2, xmax = 4, ymin = 0, ymax = 100, fill = \"yellow\", alpha = 0.5) +\n  theme_classic() +\n  theme(panel.grid.major.y = element_line(colour = \"grey\", size = 0.5),\n  axis.ticks.y = element_blank(),\n        axis.line = element_blank())\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\ndf = data.frame( x = seq(from=2000, to=2010, by = 1),\n                y = sample(1:100, length(seq(from=2000, to=2010, by = 1))))\n\n\n#use ggplot to make a line graph of df with theme_classic but with horizontal gridlines\n# and I want the numbers on the x-axis to look like '21', '22', etc\n# and I want to specify the y range but I don't want y axis tick marks\n# and I don't want axis lines but I still want x tick marks\nggplot(df, aes(x, y)) +\n  geom_line() +\n  theme_classic() +\n  theme(panel.grid.major.y = element_line(colour = \"grey\", size = 0.5),\n        axis.text.x = element_text(size = 12, vjust = 0.5, hjust = 0.5),\n        axis.ticks.y = element_blank(),\n        axis.line = element_blank()) +\n  scale_x_continuous(breaks = seq(2000, 2010, by = 1), labels = c(\"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\")) +\n  coord_cartesian(ylim = c(0, 100))\n\n\n\ndf = data.frame( x = seq(from=2000, to=2010, by = 1),\n                y = sample(1:100, length(seq(from=2000, to=2010, by = 1))),\n                z = sample(1:100, length(seq(from=2000, to=2010, by = 1))))\n\n# turn df into long format with y and z as groups\ndf_long = df %>%\n  pivot_longer(cols = c(y, z), names_to = \"group\", values_to = \"value\")\n\n#make a line plot of df_long with x on the x-axis and value on the y-axis\n# and I want to color the lines by group\n# and I want theme_classic() but with horizontal gridlines\n# and I want to annotate the name of the line on top of the line but only to the last point of the line with annotate()\n# and finally I want my text to be in times new roman font\nggplot(df_long, aes(x, value, color = group)) +\n  geom_line() +\n  theme_classic() +\n  theme(panel.grid.major.y = element_line(colour = \"grey\", size = 0.5),\n        text = element_text(family = \"Times New Roman\")) +\n  geom_text(data = df_long %>% filter(x == max(x)), aes(label = group), hjust = 0, vjust = 0, nudge_x = 0.5, nudge_y = 0.5)\n\n\n\n#make a line plot of df_long with x on the x-axis and value on the y-axis\n#and I want to get rid of the x and y axis lines, but I want to keep horizontal gridlines\n#and I want to color the lines by group\n\nggplot(df_long, aes(x, value, color = group)) +\n  geom_line() +\n  theme(axis.line = element_blank(),\n        panel.grid.major.y = element_line(colour = \"grey\", size = 0.5))"
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "My name is Cora Hirst, and I am a first year Population Biology, Ecology, and Evolution PhD student at Emory University. I am originally from Denver, Colorado, but I have lived in Georgia for about 6 years (and counting!)\n\n\n\nPhD, Population Biology, Ecology, and Evolution. August 2023 – Present. Emory University, Atlanta, GA, USA.\nBS, Human Biology and Anthropology and Biology, Summa cum Laude. August 2018 – May 2022. Emory University, Atlanta, GA, USA.\nand Proud International Baccalaureate Diploma Holder\n\n\n\nWhile my previous research experience involved bioinformatics from ancient human DNA sequences, I found that the most interesting bits about that research were\n\ndetermining whether unique evolutionary signatures could be teased out of the DNA from isolated human populations, and\nunderstanding the origins of the models into which I was “plugging” my sequences - can you believe I had never heard the name “Fisher” until my fourth year as an undergraduate?\n\nThat said, I focused mainly on charting allele frequency changes among genes encoding integral elements of the immune system during historic epidemics… and realized that, while it is very easy to make up a story about why genes may co-evolve with one another, it’s much more difficult (and, in my opinion, interesting) to rigourously test and theorize about those stories.\n\n\n\nFatefully, I met my current research advisor after taking an Immunology class on a whim, and discovered that theoretical biology was not only a field, but one very closely related to the theories in population biology and evolution I was already so curious about. An incredible mathematical biologist and modeler, he took me under his wing to build my statistical, mathematical, and theoretical intuition from the ground up.\nOver the past two years, I’ve greatly built upon my understanding of statistics (and surveyed statistical mechanics, as a mirror to population biology), developed a strong understanding of how to utilize R (and, from my undergraduate experience, Python) to develop and run both stochastic and determinisitic models of dynamical systems, and ventured into the realm of regression modeling to try to find deterministic factors in noisy data (and to try to understand what “noise” really means.) Mainly, I focus on questions regarding fundamental immunological mechanisms - how well does our body actually distinguish “bad” from “good”? How does our immune system decide the amount of memory to allocate to past infections? How does the timing of effector cell recruitment determine disease outcome?\n\n\n\nOne such area of big-picture questions that has piqued my interest lately is that of autoimmunity - for instance, why, if our immune responses are so specific and could recognize any organic compound we could ever think of manufacturing, do we not see higher instances of autoimmunity? How common is autoreactivity, and when does it lead to disease? How much do different mechanisms of self-tolerance (and other-tolerance?) contribute to reducing autoimmune disease?\nThe immunologist (and one of my favorite theoreticians) Polly Matzinger delivered a series of lectures regarding theoretical immunology, and this was one of my favorites. She’s credited with developing the “Danger Model” of immune system activation, which helps to explain how our immune systems can specifically target pathogens, but not our own cells.\nThe autoimmunity lecture is a nice comment on how this mechanism of distinguishing “good self” from “harmful other” might go awry. Our immune systems may have a difficult time discerning “harmful self” like cancers or “good other” like commensals, and this challenge may be compounded by pathogens who evolve to look more like us, by an increased amount of time we are inflamed, or by naivety (age).\nShe’s also pretty cool - as a graduate student, her advisor insited she publish a paper she worked on all by herself. Afraid she wouldn’t be taken seriously, she included her dog as a co-author.\n\n\n\nPolly with her dog and most famous co-author, Galadriel Mirkwood.\n\n\n\n\n\nDr. Handel graciously allowed me to participate in this course, and from it I’m hoping to both improve my fluency in R (particulaly, how to write neat, manageable, and reproducible code), while also becoming more comfortable with statistics for data analysis (both real-life data and data that is generated in situ.) The tricky thing is, we have so many fun ideas to play with, and now it’s the time to become more rigourous in that endeavour!\n\n\n\n\n\n\nThis is me, holding a pumpkin spice latte in front of the Christmas lights at the farm near my home along the front range!\n\n\n\n\n\nHere’s a photo of my cat, Eigen, in Georgia…\n\n\nHe’s a rescue, with one eye, FIV, and a reset jaw. But he’s perfectly (purr-fectly?) happy and relatively healthy with the help of antibiotics, and sounds a little like Darth Vador when he breathes :) Plus, I’ve been interested in dynamical systems models of HIV infections, so to me, the little man is a treasure trove of interesting immunology!\n\n\n\n…and here’s one of my cat back in Denver.\n\n\nHe’s a rescue too (of sorts - we collected him as a kitten from a box in front of a grocery store.) Tails - named after the Sonic the Hedgehog character, which seven-year-old me was adament about explaining - has been a part of our family for nearly 16 years, and while he’s not the brightest bulb, he sure is fun to mess with!\n\n\n\nLastly, this is my roommate, Tracy, who is my best friend here in Georgia and is working her tailfeathers off to find an MD-PhD program for Orthopedics."
  },
  {
    "objectID": "aboutme.html#cora-the-coloradan",
    "href": "aboutme.html#cora-the-coloradan",
    "title": "About me",
    "section": "",
    "text": "My name is Cora Hirst, and I am a first year Population Biology, Ecology, and Evolution PhD student at Emory University. I am originally from Denver, Colorado, but I have lived in Georgia for about 6 years (and counting!)\n\n\n\nPhD, Population Biology, Ecology, and Evolution. August 2023 – Present. Emory University, Atlanta, GA, USA.\nBS, Human Biology and Anthropology and Biology, Summa cum Laude. August 2018 – May 2022. Emory University, Atlanta, GA, USA.\nand Proud International Baccalaureate Diploma Holder\n\n\n\nWhile my previous research experience involved bioinformatics from ancient human DNA sequences, I found that the most interesting bits about that research were\n\ndetermining whether unique evolutionary signatures could be teased out of the DNA from isolated human populations, and\nunderstanding the origins of the models into which I was “plugging” my sequences - can you believe I had never heard the name “Fisher” until my fourth year as an undergraduate?\n\nThat said, I focused mainly on charting allele frequency changes among genes encoding integral elements of the immune system during historic epidemics… and realized that, while it is very easy to make up a story about why genes may co-evolve with one another, it’s much more difficult (and, in my opinion, interesting) to rigourously test and theorize about those stories.\n\n\n\nFatefully, I met my current research advisor after taking an Immunology class on a whim, and discovered that theoretical biology was not only a field, but one very closely related to the theories in population biology and evolution I was already so curious about. An incredible mathematical biologist and modeler, he took me under his wing to build my statistical, mathematical, and theoretical intuition from the ground up.\nOver the past two years, I’ve greatly built upon my understanding of statistics (and surveyed statistical mechanics, as a mirror to population biology), developed a strong understanding of how to utilize R (and, from my undergraduate experience, Python) to develop and run both stochastic and determinisitic models of dynamical systems, and ventured into the realm of regression modeling to try to find deterministic factors in noisy data (and to try to understand what “noise” really means.) Mainly, I focus on questions regarding fundamental immunological mechanisms - how well does our body actually distinguish “bad” from “good”? How does our immune system decide the amount of memory to allocate to past infections? How does the timing of effector cell recruitment determine disease outcome?\n\n\n\nOne such area of big-picture questions that has piqued my interest lately is that of autoimmunity - for instance, why, if our immune responses are so specific and could recognize any organic compound we could ever think of manufacturing, do we not see higher instances of autoimmunity? How common is autoreactivity, and when does it lead to disease? How much do different mechanisms of self-tolerance (and other-tolerance?) contribute to reducing autoimmune disease?\nThe immunologist (and one of my favorite theoreticians) Polly Matzinger delivered a series of lectures regarding theoretical immunology, and this was one of my favorites. She’s credited with developing the “Danger Model” of immune system activation, which helps to explain how our immune systems can specifically target pathogens, but not our own cells.\nThe autoimmunity lecture is a nice comment on how this mechanism of distinguishing “good self” from “harmful other” might go awry. Our immune systems may have a difficult time discerning “harmful self” like cancers or “good other” like commensals, and this challenge may be compounded by pathogens who evolve to look more like us, by an increased amount of time we are inflamed, or by naivety (age).\nShe’s also pretty cool - as a graduate student, her advisor insited she publish a paper she worked on all by herself. Afraid she wouldn’t be taken seriously, she included her dog as a co-author.\n\n\n\nPolly with her dog and most famous co-author, Galadriel Mirkwood.\n\n\n\n\n\nDr. Handel graciously allowed me to participate in this course, and from it I’m hoping to both improve my fluency in R (particulaly, how to write neat, manageable, and reproducible code), while also becoming more comfortable with statistics for data analysis (both real-life data and data that is generated in situ.) The tricky thing is, we have so many fun ideas to play with, and now it’s the time to become more rigourous in that endeavour!\n\n\n\n\n\n\nThis is me, holding a pumpkin spice latte in front of the Christmas lights at the farm near my home along the front range!\n\n\n\n\n\nHere’s a photo of my cat, Eigen, in Georgia…\n\n\nHe’s a rescue, with one eye, FIV, and a reset jaw. But he’s perfectly (purr-fectly?) happy and relatively healthy with the help of antibiotics, and sounds a little like Darth Vador when he breathes :) Plus, I’ve been interested in dynamical systems models of HIV infections, so to me, the little man is a treasure trove of interesting immunology!\n\n\n\n…and here’s one of my cat back in Denver.\n\n\nHe’s a rescue too (of sorts - we collected him as a kitten from a box in front of a grocery store.) Tails - named after the Sonic the Hedgehog character, which seven-year-old me was adament about explaining - has been a part of our family for nearly 16 years, and while he’s not the brightest bulb, he sure is fun to mess with!\n\n\n\nLastly, this is my roommate, Tracy, who is my best friend here in Georgia and is working her tailfeathers off to find an MD-PhD program for Orthopedics."
  },
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "data-exercise/code/data-exercise.html",
    "href": "data-exercise/code/data-exercise.html",
    "title": "Data Exercise Week 4",
    "section": "",
    "text": "## Install and load required packages\n#install.packages(\"dplyr\")\nlibrary(dplyr)\n\n#install.packages(\"purrr\")\nlibrary(purrr)\n\n#install.packages(\"lubridate\")\nlibrary(lubridate)\n\n#install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n#install.packages(\"readxl\")\nlibrary(readxl)\n\n#install.packages(\"openxlsx\")\nlibrary(openxlsx)\n\n# install.packages(\"gtsummary\")\nlibrary(gtsummary)\n\n# install.packages(\"flextable\")\nlibrary(flextable)\n\n#install.packages(\"here\")\nlibrary(here)"
  },
  {
    "objectID": "data-exercise/code/data-exercise.html#synthetic-dataset-generation-high-disease-severity-in-patients-is-correlated-with-a-longer-time-between-infection-and-vaccination",
    "href": "data-exercise/code/data-exercise.html#synthetic-dataset-generation-high-disease-severity-in-patients-is-correlated-with-a-longer-time-between-infection-and-vaccination",
    "title": "Data Exercise Week 4",
    "section": "Synthetic Dataset Generation: High disease severity in patients is correlated with a longer time between infection and vaccination",
    "text": "Synthetic Dataset Generation: High disease severity in patients is correlated with a longer time between infection and vaccination\nThe chunk below simply sets a seed for reproducibility (I’d like for my probability function to assign the same numbers each time I run it), and defines the number of observations I’d like to generate in my dataset.\n\n# Set a seed for reproducibility\nset.seed(123)\n\n# Define the number of observations to generate\nn_patients &lt;- 100\n\nHere, I will be generating the dataset as a data.frame. The dataset will contain 5 variables: pat_ID will be a character variable storing the IDs of various patients; age will store the age of each of these patients, and I will restrict these ages between 10 and 100; time_post_vaccination will be a numeric variable storing the amount of time elapsed, in days, since the most recent vaccination; time_post_infection will be a numerical variable storing the amount of time elapsed, in days, since the approximate date at which the patient was infected; and finally, disease_severity will be a categorical variable storing an arbitrary measure of disease severity, ranked as an integer between 0 (asymptomatic) and 10 (death, sadly).\nI chose to create an association between the amount of time between the most recent vaccination and infection (hereon refered to as “time between”) and disease severity. The simplest way to do this, and the way I chose, is to treat the amount of time between the most recent vaccination and infection as proportional to the probability of severe disease.\nI decided that the individual with the greatest time between infection and vaccination would undoubtedly have the greatest disease severity. Technically, I divided the time between for each patient by the maximum time between among all patients (\\(\\frac{time \\ between}{max \\ time \\ between}\\)) - this is the probability of severe disease independent of other factors.\nHowever, I also want some association between age and the probability of severe disease; so, I define the actual probability of severe disease as \\(\\frac{time \\ between}{max \\ time \\ between} \\times \\frac{age}{max \\ age}\\). This way, the oldest individuals with he greatest time between infection and vaccination have the worst disease severity.\nThen, starting the disease severity of each individual at \\(0\\), I generate a random number between 0 and 1. If an individual’s probability of severe disease is greater than this randomly generated number, I add \\(1\\) to their disease severity. I do this 10 times, so the maximum possible disease severity is \\(10\\).\n\n## empty dataframe with n_patients observations \ndata = data.frame(\n  pat_id = character(n_patients), #patient ID\n  age = numeric(n_patients), #patient age\n  time_post_vaccination = integer(n_patients), #days elapsed since last vaccination \n  time_post_infection = numeric(n_patients), #days elapsed since infection\n  disease_severity = integer(n_patients) #on a scale from 1-10, how \"bad\" were illness symptoms\n)\n\n## populating the variables\n# patient id\ndata$pat_id = paste0(\"ID_\", sample(100:999, 100, replace=F) ) # each gets a 3-digit ID because I feel like it \n# patient age\ndata$age = c(sample(10:50, 30, replace=T), sample(51:100, 70, replace = T)) #I want to have more samples from age &lt; 50, and to not children under 10\ndata$time_post_infection = c(sample(7:60, 100, replace=T)) # between one week and two months\ndata$time_post_vaccination = data$time_post_infection + c(sample(30:200, 100, replace=T)) # all individuals had a vaccination between 1 month and 200 days before their infection \n\n### alright, now I want to make a correlation between disease severity in the time between vaccination and infection. That means I need to add a third column, time between vaccination and infection, and bias my samples of numbers 1:10 by that number. Then I'll delete that column so that the \"analyst\" has to think of it themselves muahahahaha\n\ndata$time_between = data$time_post_vaccination - data$time_post_infection #the bigger the difference, the greater the probability of getting 10\n\n## how to do disease severity? for loop 10 times. Probability of adding 1 is equal to (timebetween/maxtimebetween); thus, if a randomly generated number between 0 and 1 is less than this probability, we add 1 to disease severity. The longer between vaccine and infection, the worse protected we are! -&gt; sometime it would be cool to alter this so there is some penalty to getting infected immediatly after vaccination. :)\n\n## however, I also want some relationship between age and disease severity. So, I am going to reduce the \"effective\" time between vaccination and infection by age. \n\n# vector to store our simulated disease severities\ndisease_severities = rep(0, 100)\n\n# simulation to generate disease severities based on time between vaccination and infection \nfor(c in 1:10){\n  for(i in 1:n_patients){\n    prob = (data[i, \"time_between\"])/max(data$time_between)\n    age_adjust_prob = prob * (data[i, \"age\"])/max(data$age)\n    rand = runif(1, min = 0, max = 1)\n    if(age_adjust_prob &gt; rand){disease_severities[i] = disease_severities[i] + 1}\n  }\n  c = c+1\n}\n\n# add these disease severities to our dataset as FACTOR\ndata$disease_severity = factor(disease_severities)\n\n#finally, remove our \"time between\" category - though I'm just going to add it back in the next code chunk ;)\ndata = data[,!(names(data) %in% \"time_between\")]\n\n\n### and now we have our dataset! I can write it as an excel workbook for the sake of reproducibility, and I'll add my codebook to it\ncodebook = data.frame(variable = names(data),\n                      description = c(\"unique patient 3-digid ID\", \"patient age, range [10,100]\", \"time elapsed since patient's most recent vaccine, range [64,249]\", \"time elapsed since approximate date of infection, range [7,60]\", \"categorical measure of disease severity, scale of 0 (asymptomatic) to 10 (death)\"),\n                      values = c(\"character: ID_XXX\", \"numerical\", \"numerical\", \"numerical\", \"factor\"))\n\n# save the data dataframe and codebook dataframe in a list for export\nsynth_data_list = list(data, codebook)\nnames(synth_data_list) = c(\"breakthrough_infections\", \"codebook\")\n\n# saving dataset with openxlsx\nprocessed_dataset = here(\"data-exercise\", \"data\", \"synthetic_data_vaccines_work.xlsx\")\nopenxlsx::write.xlsx(synth_data_list, file = processed_dataset)"
  },
  {
    "objectID": "data-exercise/code/data-exercise.html#exploring-synthetic-data-do-i-observe-the-correct-predictors-for-disease-severity",
    "href": "data-exercise/code/data-exercise.html#exploring-synthetic-data-do-i-observe-the-correct-predictors-for-disease-severity",
    "title": "Data Exercise Week 4",
    "section": "Exploring Synthetic Data: Do I observe the correct predictors for disease severity?",
    "text": "Exploring Synthetic Data: Do I observe the correct predictors for disease severity?\nIn the following code chunk, I explore my synthetic dataset to see which variables appear to have the greatest effect on disease_severity.\n\n# what is the structure? Do my variables take the form I expect? \nstr(data)\n\n'data.frame':   100 obs. of  5 variables:\n $ pat_id               : chr  \"ID_514\" \"ID_562\" \"ID_278\" \"ID_625\" ...\n $ age                  : int  46 17 19 43 19 31 21 29 26 44 ...\n $ time_post_vaccination: int  176 150 125 124 124 135 145 94 171 110 ...\n $ time_post_infection  : int  35 57 16 59 60 19 49 17 31 58 ...\n $ disease_severity     : Factor w/ 11 levels \"0\",\"1\",\"2\",\"3\",..: 4 3 1 1 1 4 2 2 1 1 ...\n\nsummary(data)\n\n    pat_id               age        time_post_vaccination time_post_infection\n Length:100         Min.   :14.00   Min.   : 64.0         Min.   : 7.00      \n Class :character   1st Qu.:42.50   1st Qu.:109.5         1st Qu.:19.75      \n Mode  :character   Median :63.50   Median :155.5         Median :32.00      \n                    Mean   :62.26   Mean   :153.2         Mean   :33.02      \n                    3rd Qu.:83.25   3rd Qu.:187.5         3rd Qu.:47.00      \n                    Max.   :99.00   Max.   :249.0         Max.   :60.00      \n                                                                             \n disease_severity\n 2      :16      \n 0      :14      \n 3      :13      \n 5      :12      \n 8      :12      \n 6      :11      \n (Other):22      \n\n# what is the distribution of individuals by age? disease_severity? \nplot0 = ggplot() + geom_histogram(data = data, aes(x = age, y=..density..), colour=\"black\", fill=\"white\") +\n  geom_density(data = data, aes(x = age), alpha = 0.2, fill = \"salmon\") +\n  geom_vline(xintercept = mean(data$age), color=\"salmon\", linetype=\"dashed\", linewidth=1) +\n  labs(title = \"distribution of patients by age\")\n\nplot1 = ggplot() + geom_histogram(data = data, aes(x = disease_severity), stat = \"count\", colour=\"black\", fill=\"white\") +\n  geom_vline(xintercept = ceiling(mean(as.numeric(levels(data$disease_severity))[data$disease_severity])), color=\"blue\", linetype=\"dashed\", linewidth=1) +\n  labs(title = \"distribution of patients by disease severity\")\n\n# let's see distribution of ages in each disease severity category \nplot2 = ggplot() + geom_boxplot(data = data, aes(x = disease_severity, y = age)) +\n  geom_point(data=data, aes(x = disease_severity, y = age, col = disease_severity), alpha = 0.75) +\n  labs(x = \"disease severity\", y = \"age\", title = \"ages of patients in each disease category\") + \n  theme(legend.position = \"none\") + # I dont want the legend to show\n  scale_color_manual(values = c(\"darkgreen\",\n                         \"forestgreen\", \n                         \"springgreen\",\n                         \"olivedrab1\",\n                         \"gold\",\n                         \"goldenrod1\",\n                         \"orange\",\n                         \"darkorange2\",\n                         \"orangered2\",\n                         \"red3\",\n                         \"darkred\"))\n\n# let's see if disease severity correlates with age \nplot3 = ggplot() + geom_point(data=data, aes(x = age, y = disease_severity, col = time_post_vaccination)) + \n  geom_smooth(data = data, aes(x = age,  y=as.numeric(levels(disease_severity))[disease_severity]), method = \"lm\") + #had to unfactor the disease severity categoriy with as.numeric(levels())[]\n  labs(x = \"age\", y = \"disease severity\", title = \"correlation between disease severity and age\")  \n#heck yeah it does, so that part of the simulation worked! \n\n# let's see if disease severity correlates with time since vaccination\nplot4 = ggplot() + geom_point(data = data, aes(x=time_post_vaccination, y=disease_severity)) + \n  geom_smooth(data = data, aes(x = time_post_vaccination, y=as.numeric(levels(disease_severity))[disease_severity]), method = \"lm\") + #had to unfactor the disease severity categoriy with as.numeric(levels())[]\n  labs(x = \"time post vaccination\", y = \"disease severity\", title = \"correlation between disease severity and time since vaccination\") \n\n# same for time post infection \nplot5 = ggplot() + geom_point(data = data, aes(x=time_post_infection, y=disease_severity)) +\n  labs(x = \"time post infection\", y = \"disease severity\", title = \"correlation between disease severity and time post infection\")  \n\n## save these files \n#figure 0 - yes, I added one and was too lazy to change the numbering \nfigure_file = here(\"data-exercise\", \"figures\", \"age_distribution.png\")\nggsave(filename = figure_file, plot=plot0) \n\n#figure 1\nfigure_file = here(\"data-exercise\", \"figures\", \"severity_distribution.png\")\nggsave(filename = figure_file, plot=plot1) \n\n#figure 2\nfigure_file = here(\"data-exercise\", \"figures\", \"age_severity_boxplots.png\")\nggsave(filename = figure_file, plot=plot2) \n\n#figure 3\nfigure_file = here(\"data-exercise\", \"figures\", \"age_severity_scatter.png\")\nggsave(filename = figure_file, plot=plot3) \n\n#figure 4\nfigure_file = here(\"data-exercise\", \"figures\", \"time_post_vacc_severity_scatter.png\")\nggsave(filename = figure_file, plot=plot4) \n\n#figure 5\nfigure_file = here(\"data-exercise\", \"figures\", \"time_post_inf_severity_scatter.png\")\nggsave(filename = figure_file, plot=plot5) \n\nI introduced an association between age and disease_severity, and I should observe some positive correlation between disease_severity and age.\n\n\n\n\n\nFigure 1: Summary of the distribution of ages of patients with varying diseases severities. Each colored point represents one patient.\n\n\n\n\nClearly, there is a correlation between age and disease severity (Figure 1.) Interestingly, the distribution of ages of patients with high disease severities is particularly narrow when compared to patients with lower disease severities; this can in part be attributed to a smaller representation of patients with high disease severity (Figure 2.)\n\n\n\n\n\nFigure 2: Distribution of patients with varying diseases severities. Blue line shows the mean disease severity across patients.\n\n\n\n\nHowever, we also need to take into consideration that there are a large number of older patients (Figure 3), and a wider distribution of the older aged individuals across disease severity.\n\n\n\n\n\nFigure 3: Distribution of patients by age. Pink line shows the mean age across patients.\n\n\n\n\nThus, there is likely some other variable influencing the number of patients with high disease severity. When I plot the correlation between age and disease severity and observe the associated time elapsed since last vaccination (Figure 4), it becomes apparent that higher disease severities are associated with longer times post vaccination (light colored dots).\n\n\n\n\n\nFigure 4: Correlation between patient’s age and disease severity.\n\n\n\n\nReferring back to the generation of the dataset, I also introduced an association between the time between time_post_vaccination and time_post_infection and disease_severity. I expect that, without calculating and plotting this time difference itself against disease_severity, there should be some signal of the negative correlation in the plot of time_post_vaccination and disease_severity. Because time_post_vaccination has a wider range than time_post_infection, I anticipate it will have had a greater effect on the variation within the difference between time_post_vaccination and time_post_infection; thus, I expect this signal to be lost when plotting the relationship between time_post_infection and disease_severity.\n\n\n\n\n\nFigure 5: Correlation between the time elapsed since the individual’s last vaccination and disease severity.\n\n\n\n\nThere is, in fact, some positive correlation recovered between the time elapsed since a patient’s last vaccination and the severity of their disease (Figure 5.) However, the significance of this association is not apparent.\nLastly, I would also like to see if the time elapsed since being effected (how long the patient had been infected before the observation was made) has any visual effect- it’s important to see if my random sampling and pairing has generated any!\n\n\n\n\n\nFigure 6: Correlation between the time elapsed since the individual’s infection and disease severity.\n\n\n\n\nFigure 6 demonstrates that there is little correlation between disease severity and the time elapsed since becoming infected.\n\nAlso greater variation in the ages of patients with lower disease severities than higher disease severities, and not just dependent upon fewer samples (more samples captured for older ages) -&gt; though may be a result of fewer samples for youths. Could check this out by exploring ages before and after the mean as independent datasets (for later!)"
  },
  {
    "objectID": "data-exercise/code/data-exercise.html#synthetic-data-analysis",
    "href": "data-exercise/code/data-exercise.html#synthetic-data-analysis",
    "title": "Data Exercise Week 4",
    "section": "Synthetic Data Analysis",
    "text": "Synthetic Data Analysis\nVisually, I have recovered some association between disease_severity and age, as well as disease_severity and time_post_vaccination. I use the following linear regression model to determine the significance of these correlations.\n\n# determine best fit linear models \nfit1 = lm(data = data, as.numeric(levels(disease_severity))[disease_severity]~age) #how good is age at predicting disease severity (linearly)\nfit2 = lm(data = data, as.numeric(levels(disease_severity))[disease_severity]~time_post_vaccination) #how good is time post vaccination at estimating disease severity? \n\n# generate tables to present\ntable1 = fit1 %&gt;% gtsummary::tbl_regression() #save summaries as tables using tbl_regression() function from gtsummary package\ntable2 = fit2 %&gt;% gtsummary::tbl_regression() #save summaries as tables using tbl_regression() function from gtsummary package\n\n# save summary tables\nsummarytable_file = here(\"data-exercise\", \"tables\", \"lm_severity_age.rds\")\nsaveRDS(table1, file = summarytable_file)\n\nsummarytable_file = here(\"data-exercise\", \"tables\", \"lm_severity_time_post_vacc.rds\")\nsaveRDS(table1, file = summarytable_file)\n\n# extract p-values from summaries to display on figures\np.age = unname(summary(fit1)$coefficients[,\"Pr(&gt;|t|)\"])[2]\np.time_post_vaccination = unname(summary(fit2)$coefficients[,\"Pr(&gt;|t|)\"])[2]\n\n\n\n\n\nTable 1: Linear regression model of disease severity by age.\n\n\nCharacteristic\nBeta\n95% CI\np-value\n\n\n\n\nage\n0.08\n0.06, 0.09\n&lt;0.001\n\n\n\n\n\n\n\n\n\n\nTable 2: Linear regression model of disease severity by time elapsed since vaccination.\n\n\nCharacteristic\nBeta\n95% CI\np-value\n\n\n\n\nage\n0.08\n0.06, 0.09\n&lt;0.001\n\n\n\n\n\n\nBoth the association between disease severity and age as well as disease severity and time post vaccination are significant (\\(p&lt;0.05\\); Table 1, Table 2.) Thus, either variable appears to be a pretty good predictor of disease severity.\nBut, we know from figures Figure 4 and, especially, Figure 5 that the interaction between these terms may be an even better predictor of disease severity. If our goal is to generate the best model to help predict the disease severity of a patient, we might want to fit a linear model with both of these variables as predictors.\nThe following code chunk fits this multi-variable linear model:\n\n# determine best fit models\nmodel1 = lm(as.numeric(levels(disease_severity))[disease_severity] ~ time_post_vaccination + time_post_infection + age, data=data)\n\n# generate tables to present\ntable1 = model1 %&gt;% gtsummary::tbl_regression() #save summaries as tables using tbl_regression() function from gtsummary package\n\n# save summary tables\nsummarytable_file = here(\"data-exercise\", \"tables\", \"lm_severity_all.rds\")\nsaveRDS(table1, file = summarytable_file)\n\n# extract p-values from summaries to display on figures\np.all = unname(summary(model1)$coefficients[,\"Pr(&gt;|t|)\"])[2]\n\n\n\n\n\nTable 3: Linear regression model of disease severity by age, time elapsed since vaccination, and time elapsed since infection.\n\n\nCharacteristic\nBeta\n95% CI\np-value\n\n\n\n\nage\n0.08\n0.06, 0.09\n&lt;0.001\n\n\n\n\n\n\nThis model also provides a significant p-value. But how different are the p-values for these three models: disease severity ~ age, disease severity ~ time post vaccination, and disease severity ~ age + time post vaccination + time post infection?\n\ncomparing p-values for different linear predictors of disease severity\n\n\n\n\n\n\n\n\nage\ntime_post_vaccination\nage + time_post_infection + time_post_vaccination\n\n\n\n\n\n5.7339746^{-14}\n2.5827222^{-15}\n4.3594356^{-17}\n\n\n\n\nIt looks like the multivariable linear regression of disease severity with age, time post vaccination, and time post infection fits the model significantly better than either age or time post vaccination alone.\nIf I were to receive this dataset without knowing the associations I built into (and if I weren’t particularly clever, jury’s out on that one!), I might stop there and say that either variable is a good predictor of illness.\nBut, I know that the true predictor of disease severity is the difference between time_post_vaccination and time_post_infection; that is, I wanted to generate the data so that individuals who were most recently vaccinated had a better disease outcome than those who were vaccinated a longer time before infection. In the following code chunk, I add the variable \\(diff_between\\) to the dataset - this is the time between vaccination and infection.\n\n# add variable for time between vaccination and infection \ndata$diff_between = data$time_post_vaccination-data$time_post_infection\n\n# determine best fit models\nmodel2 = lm(as.numeric(levels(disease_severity))[disease_severity] ~ diff_between, data=data)\nmodel3 = lm(as.numeric(levels(disease_severity))[disease_severity] ~ diff_between + age, data=data)\n\n# generate tables to present\n\ntable2 = model2 %&gt;% gtsummary::tbl_regression() #save summaries as tables using tbl_regression() function from gtsummary package\ntable3 = model3 %&gt;% gtsummary::tbl_regression() #save summaries as tables using tbl_regression() function from gtsummary package\n\n# save summary tables\nsummarytable_file = here(\"data-exercise\", \"tables\", \"lm_severity_diff_between.rds\")\nsaveRDS(table2, file = summarytable_file)\n\n# save summary tables\nsummarytable_file = here(\"data-exercise\", \"tables\", \"lm_severity_diff_between_age.rds\")\nsaveRDS(table3, file = summarytable_file)\n\n# extract p-values from summaries to display on figures\np.diff_between = unname(summary(model2)$coefficients[,\"Pr(&gt;|t|)\"])[2]\np.diff_between_age = unname(summary(model3)$coefficients[,\"Pr(&gt;|t|)\"])[2]\n\n\n\n\n\nTable 4: Linear regression model of disease severity by difference betweem time of vaccination and time of infection.\n\n\nCharacteristic\nBeta\n95% CI\np-value\n\n\n\n\ndiff_between\n0.04\n0.03, 0.05\n&lt;0.001\n\n\n\n\n\n\n\n\n\n\nTable 5: Linear regression model of disease severity by age and difference betweem time of vaccination and time of infection.\n\n\nCharacteristic\nBeta\n95% CI\np-value\n\n\n\n\ndiff_between\n0.03\n0.03, 0.04\n&lt;0.001\n\n\nage\n0.06\n0.04, 0.07\n&lt;0.001\n\n\n\n\n\n\nTables Table 4 and Table 5 reveal that these models are also significant predictive models. Lets compare these fits with the best fit multi-variable model:\n\ncomparing p-values for different linear predictors of disease severity\n\n\n\n\n\n\n\n\nage + time_post_infection + time_post_vaccination\ndiff_between\ndiff_between + age\n\n\n\n\n\n4.3594356^{-17}\n1.1779262^{-16}\n2.3592392^{-17}\n\n\n\n\nWe can see that the time between vaccination and infection (diff_between) is a better predictor of disease severity than either age or time elapsed since vaccination, though the mutli variable model with the three variable age, time_post_vaccination, and time_post_infection is still a better predictor than diff_between.\nHowever, the best predictor is actually the multi-variable model with fewer variables! diff_between and age predict disease severity better than all three variables, age, time_post_vaccination, and time_post_infection. Plus, we know (because I generated the model!) that there is some causal motivation for creating this fourth variable, diff_between."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "The following is an R coding excerise on loading, viewing, processing, and visualizing data in R. We complete all analysis on the gapminder dataset.\nAll code chunks are echoed for ease of viewing.\nThe following chunk loads all libraries which will be used during this exercise.\n\n## install packages and load required libraries\n\n# install.packages(\"dslabs\") #lines to install required packages are commented\nlibrary(dslabs) #load dslabs library\n\n# install.packages(\"tidyverse\") #install and load tidyverse\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# install.packages(\"here\")\nlibrary(here)\n\nhere() starts at /Users/chirst/Desktop/Git/corahirst-MADA-portfolio\n\n# install.packages(\"gtsummary\")\nlibrary(gtsummary)\n\n#StandWithUkraine\n\n# install.packages(\"flextable\")\nlibrary(flextable)\n\n\nAttaching package: 'flextable'\n\nThe following objects are masked from 'package:gtsummary':\n\n    as_flextable, continuous_summary\n\nThe following object is masked from 'package:purrr':\n\n    compose"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#more-processing",
    "href": "coding-exercise/coding-exercise.html#more-processing",
    "title": "R Coding Exercise",
    "section": "More processing",
    "text": "More processing\nThe infant_mortality variable within africandata contains many NAs. The code below determines which years contain missing (NA) data for infant mortality.\n\n## determine which years contain missing infant mortality data\nmissing_IM_years = levels(factor(africadata[is.na(africadata$infant_mortality), \"year\"])) # which levels of factor \"year\" contain missing data for vairable \"infant mortality\"?\n\nprint(paste(\"Infant mortality data is missing from the years\", paste(missing_IM_years, collapse = \" \"))) #print these years\n\n[1] \"Infant mortality data is missing from the years 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 2016\"\n\n\nInfant mortality data is missing from observations between 1960-1981, and again from 2016. Between 1981 and 2016, then, every observation from each year contains infant mortality data. So, we will plot life_expectancy against infant_mortality from observations taken during a year within that time frame, say, the year 2000."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#more-plotting",
    "href": "coding-exercise/coding-exercise.html#more-plotting",
    "title": "R Coding Exercise",
    "section": "More plotting",
    "text": "More plotting\nThe variable population is not missing data from the year 2000, so we can also plot life expectancy against population for observations taken in 2000, as well.\n\n## extract observations from the year 2000 only and save in a new dataframe\nafricadata_2000 = africadata %&gt;% filter(year == 2000)\n\n## check \nstr(africadata_2000) #all variables from africadata included\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(africadata_2000) #and each variable is of the same class as corresponding africadata variables\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n## plot\n## life_expectancy vs infant_mortality in the year 2000\nplot5 = ggplot() + geom_point(data = africadata_2000, aes(x = infant_mortality, y = life_expectancy)) + \n  geom_smooth(data = africadata_2000, aes(x = infant_mortality, y = life_expectancy), method = 'lm') +\n  labs(x = \"infant mortality\", y = \"life expectancy\", title = \"correlation between life expectancy and infant mortality in Africa, year 2000\")\n\nplot6 = ggplot() + geom_point(data = africadata_2000, aes(x = population, y = life_expectancy)) + \n  scale_x_continuous(trans = \"log\") +\n  geom_smooth(data = africadata_2000, aes(x = population, y = life_expectancy), method = 'lm') +\n  labs(x = \"population\", y = \"life expectancy\", title = \"correlation between life expectancy and population size, year 2000\")\n\nfigure_file = here(\"coding-exercise\",\"results\", \"figures\",\"life_exp_inf_mort_2000.png\")\nggsave(filename = figure_file, plot=plot5) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\nfigure_file = here(\"coding-exercise\",\"results\", \"figures\",\"life_exp_pop_2000.png\")\nggsave(filename = figure_file, plot=plot6) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nFigure 5: life expectancy by infant mortality, Africa 2000.\n\n\n\n\n\n\n\n\n\nFigure 6: life expectancy by population size, Africa 2000.\n\n\n\n\nAre these correlations (linear regressions) significant?"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#simple-model-fits",
    "href": "coding-exercise/coding-exercise.html#simple-model-fits",
    "title": "R Coding Exercise",
    "section": "Simple model fits",
    "text": "Simple model fits\nThe following code chunk utilizes the lm() function in R to determine the best-fit, simple linear regression model with life_expectancy in the year 2000 as the outcome variable and either infant_mortality or population as the predictor.\n\n# linear regression, fixed effect, life expectancy ~ infant_mortality\nfit1 = lm(data = africadata_2000, life_expectancy ~ infant_mortality) #results saved in lm object `fit1`\n\n# linear regression, fixed effect, life expectancy ~ infant_mortality\nfit2 = lm(data = africadata_2000, life_expectancy ~ population) #results saved in lm object `fit2`\n\n# print summary of lm objects fit1 and fit2\nsummary(fit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africadata_2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\nsummary(fit2)\n\n\nCall:\nlm(formula = life_expectancy ~ population, data = africadata_2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\ntable1 = fit1 %&gt;% tbl_regression() #save summaries as tables using tbl_regression() function from flextable package\ntable2 = fit2 %&gt;% tbl_regression() #save summaries as tables using tbl_regression() function from flextable package\n\n# save summary tables\nsummarytable_file = here(\"coding-exercise\",\"results\", \"tables-files\", \"lm_life_exp_inf_mort.rds\")\nsaveRDS(table1, file = summarytable_file)\n\nsummarytable_file = here(\"coding-exercise\",\"results\", \"tables-files\", \"lm_life_exp_pop.rds\")\nsaveRDS(table2, file = summarytable_file)\n\n# extract p-values from summaries to display on figures\np.infant_mortality = unname(summary(fit1)$coefficients[,\"Pr(&gt;|t|)\"])[2]\np.population = unname(summary(fit2)$coefficients[,\"Pr(&gt;|t|)\"])[2]\n\n\n\n\n\nTable 1: Linear regression model of life expectancy by infant mortality.\n\n\nCharacteristic\nBeta\n95% CI\np-value\n\n\n\n\ninfant_mortality\n-0.19\n-0.25, -0.13\n&lt;0.001\n\n\n\n\n\n\n\n\n\n\nTable 2: Linear regression model of life expectancy by population size.\n\n\nCharacteristic\nBeta\n95% CI\np-value\n\n\n\n\npopulation\n0.00\n0.00, 0.00\n0.6\n\n\n\n\n\n\n\n## replot with pvals \n## life_expectancy vs infant_mortality in the year 2000\nplot7 = ggplot() + geom_point(data = africadata_2000, aes(x = infant_mortality, y = life_expectancy)) + \n  geom_smooth(data = africadata_2000, aes(x = infant_mortality, y = life_expectancy), method = 'lm') +\n  annotate(geom = \"text\", x = 125, y = 70, label = paste(\"p-value =\", signif(p.infant_mortality, digits = 3)), color = \"forestgreen\") +\n  labs(x = \"infant mortality\", y = \"life expectancy\", title = \"correlation between life expectancy and infant mortality in Africa, year 2000\")\n\nplot8 = ggplot() + geom_point(data = africadata_2000, aes(x = population, y = life_expectancy)) + \n  scale_x_continuous(trans = \"log\") +\n  geom_smooth(data = africadata_2000, aes(x = population, y = life_expectancy), method = 'lm') +\n  annotate(geom = \"text\", x = 163000, y = 40, label = paste(\"p-value =\", signif(p.population, digits = 3)), color = \"maroon\") +\n  labs(x = \"population\", y = \"life expectancy\", title = \"correlation between life expectancy and population size, year 2000\")\n\nfigure_file = here(\"coding-exercise\",\"results\", \"figures\",\"life_exp_inf_mort_reg.png\")\nggsave(filename = figure_file, plot=plot7) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\nfigure_file = here(\"coding-exercise\",\"results\", \"figures\",\"life_exp_pop_reg.png\")\nggsave(filename = figure_file, plot=plot8) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nFigure 7: linear regression of life expectancy by infant mortality, Africa 2000.\n\n\n\n\n\n\n\n\n\nFigure 8: linear regression of life expectancy by population size, Africa 2000.\n\n\n\n\nLife expectancy appears to decrease with infant mortality, while decreasing only slightly with population size (Figure 7, Figure 8). Using a definition of \\(pvalue &lt; 0.05\\) as significance, it is evident that population size is a poor predictor of life expectancy (\\(p = 0.6 &gt; 0.05\\)). However, infant mortality is in fact a better, significant predictor of life expectancy (\\(p = 2 \\times 10^{-8}\\)) (Table 1, Table 2). Thus, we fail to reject the null hypothesis that life expectancy is not correlated with population size, but do reject the null hypothesis that life expectancy is not correlated with infant mortality rates.\n\nThis section is contributed by Taylor Glass."
  },
  {
    "objectID": "cdc-exercise/code/cdcdata-exercise.html",
    "href": "cdc-exercise/code/cdcdata-exercise.html",
    "title": "cdcdata-exercise",
    "section": "",
    "text": "#install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n#install.packages(\"dplyr\")\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n#install.packages(\"here\")\nlibrary(here)\n\nhere() starts at /Users/chirst/Desktop/Git/corahirst-MADA-portfolio"
  },
  {
    "objectID": "cdc-exercise/code/cdcdata-exercise.html#loading-the-data-and-selecting-variables-of-interest",
    "href": "cdc-exercise/code/cdcdata-exercise.html#loading-the-data-and-selecting-variables-of-interest",
    "title": "cdcdata-exercise",
    "section": "Loading the data and selecting variables of interest",
    "text": "Loading the data and selecting variables of interest\nThe following code chunk solely loads the data and visualizes all 28 variables.\n\n# load dataset\nferret_IAV_data &lt;- read.csv(here(\"cdc-exercise\", \"data\", \"IAV_morbidity_and_titer_measurements_ferrets.csv\"))\n\n# view dataset \nstr(ferret_IAV_data)\n\n'data.frame':   717 obs. of  28 variables:\n $ Ferret     : chr  \"F1\" \"F2\" \"F3\" \"F4\" ...\n $ Virus      : chr  \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" ...\n $ units      : chr  \"EID\" \"EID\" \"EID\" \"EID\" ...\n $ expt       : chr  \"path\" \"path\" \"path\" \"path\" ...\n $ lethal     : chr  \"false\" \"false\" \"false\" \"false\" ...\n $ lethal_day : int  0 0 0 0 0 0 0 0 0 0 ...\n $ NW_typical : chr  \"true\" \"true\" \"true\" \"true\" ...\n $ RD_trans   : chr  NA NA NA NA ...\n $ HPAI       : chr  \"false\" \"false\" \"false\" \"false\" ...\n $ HPAI_MBAA  : chr  \"false\" \"false\" \"false\" \"false\" ...\n $ HA         : chr  \"H7\" \"H7\" \"H7\" \"H7\" ...\n $ NA.        : chr  \"N2\" \"N2\" \"N2\" \"N2\" ...\n $ Origin     : chr  \"avian\" \"avian\" \"avian\" \"avian\" ...\n $ wt_loss    : num  6.7 11.8 15.4 5.9 7.9 6.1 3.5 22.5 15 14.9 ...\n $ wt_loss_day: int  7 4 6 11 5 9 11 7 7 8 ...\n $ temp       : num  0.5 0.9 2 1 1 0.5 0.5 1.1 1.1 1 ...\n $ temp_day   : int  4 7 8 9 3 3 7 7 7 1 ...\n $ temp_5     : num  0.5 0.7 1.8 0.3 1 0.5 0.3 0.1 0.6 1 ...\n $ temp_5_day : int  4 2 2 3 3 3 1 3 3 1 ...\n $ d1_inoc    : num  6.5 5.5 6.25 6.75 6.25 7.25 5.75 5.75 4.75 6.5 ...\n $ d2_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d3_inoc    : num  4.5 6.5 5.5 6.75 6.5 6.75 5.75 5.5 3.75 5.25 ...\n $ d4_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d5_inoc    : num  4.75 4.75 5.75 5.75 4.75 4.5 5.75 5.5 5.25 6.5 ...\n $ d6_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d7_inoc    : num  1.75 1.5 1.5 3.25 1.5 1.5 1.5 2.25 1.5 3.25 ...\n $ d8_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d9_inoc    : num  1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 ...\n\n\nNow, I would like to subset the dataset for only the variables of interest:\n\n# select variables from dataset\nferret_IAV_data = ferret_IAV_data %&gt;%\n  select(-c(\"expt\", \"NW_typical\", \"RD_trans\", \"Origin\", \"temp_5\", \"temp_5_day\"))\n\n# view pruned dataset\nstr(ferret_IAV_data) #\n\n'data.frame':   717 obs. of  22 variables:\n $ Ferret     : chr  \"F1\" \"F2\" \"F3\" \"F4\" ...\n $ Virus      : chr  \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" ...\n $ units      : chr  \"EID\" \"EID\" \"EID\" \"EID\" ...\n $ lethal     : chr  \"false\" \"false\" \"false\" \"false\" ...\n $ lethal_day : int  0 0 0 0 0 0 0 0 0 0 ...\n $ HPAI       : chr  \"false\" \"false\" \"false\" \"false\" ...\n $ HPAI_MBAA  : chr  \"false\" \"false\" \"false\" \"false\" ...\n $ HA         : chr  \"H7\" \"H7\" \"H7\" \"H7\" ...\n $ NA.        : chr  \"N2\" \"N2\" \"N2\" \"N2\" ...\n $ wt_loss    : num  6.7 11.8 15.4 5.9 7.9 6.1 3.5 22.5 15 14.9 ...\n $ wt_loss_day: int  7 4 6 11 5 9 11 7 7 8 ...\n $ temp       : num  0.5 0.9 2 1 1 0.5 0.5 1.1 1.1 1 ...\n $ temp_day   : int  4 7 8 9 3 3 7 7 7 1 ...\n $ d1_inoc    : num  6.5 5.5 6.25 6.75 6.25 7.25 5.75 5.75 4.75 6.5 ...\n $ d2_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d3_inoc    : num  4.5 6.5 5.5 6.75 6.5 6.75 5.75 5.5 3.75 5.25 ...\n $ d4_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d5_inoc    : num  4.75 4.75 5.75 5.75 4.75 4.5 5.75 5.5 5.25 6.5 ...\n $ d6_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d7_inoc    : num  1.75 1.5 1.5 3.25 1.5 1.5 1.5 2.25 1.5 3.25 ...\n $ d8_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d9_inoc    : num  1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 ...\n\nsummary(ferret_IAV_data)\n\n    Ferret             Virus              units              lethal         \n Length:717         Length:717         Length:717         Length:717        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   lethal_day         HPAI            HPAI_MBAA              HA           \n Min.   : 0.000   Length:717         Length:717         Length:717        \n 1st Qu.: 0.000   Class :character   Class :character   Class :character  \n Median : 0.000   Mode  :character   Mode  :character   Mode  :character  \n Mean   : 1.013                                                           \n 3rd Qu.: 0.000                                                           \n Max.   :13.000                                                           \n                                                                          \n     NA.               wt_loss        wt_loss_day          temp      \n Length:717         Min.   : 0.000   Min.   : 0.000   Min.   :0.000  \n Class :character   1st Qu.: 4.800   1st Qu.: 4.000   1st Qu.:1.000  \n Mode  :character   Median : 9.200   Median : 7.000   Median :1.600  \n                    Mean   : 9.869   Mean   : 6.424   Mean   :1.596  \n                    3rd Qu.:14.400   3rd Qu.: 9.000   3rd Qu.:2.200  \n                    Max.   :27.500   Max.   :14.000   Max.   :4.000  \n                    NA's   :2                         NA's   :4      \n    temp_day       d1_inoc         d2_inoc         d3_inoc         d4_inoc     \n Min.   : 0.0   Min.   :1.000   Min.   :3.500   Min.   :1.980   Min.   :1.980  \n 1st Qu.: 1.0   1st Qu.:4.800   1st Qu.:5.500   1st Qu.:4.500   1st Qu.:4.255  \n Median : 2.0   Median :5.780   Median :6.155   Median :5.320   Median :5.250  \n Mean   : 3.1   Mean   :5.811   Mean   :5.950   Mean   :5.284   Mean   :5.046  \n 3rd Qu.: 4.0   3rd Qu.:6.750   3rd Qu.:6.500   3rd Qu.:6.250   3rd Qu.:5.750  \n Max.   :14.0   Max.   :9.250   Max.   :8.750   Max.   :8.750   Max.   :7.500  \n                NA's   :110     NA's   :607     NA's   :110     NA's   :607    \n    d5_inoc         d6_inoc         d7_inoc         d8_inoc     \n Min.   :1.500   Min.   :1.500   Min.   :1.000   Min.   :1.000  \n 1st Qu.:4.460   1st Qu.:3.250   1st Qu.:1.000   1st Qu.:1.500  \n Median :5.100   Median :4.500   Median :1.500   Median :1.500  \n Mean   :5.042   Mean   :4.195   Mean   :1.986   Mean   :1.573  \n 3rd Qu.:5.750   3rd Qu.:5.250   3rd Qu.:2.500   3rd Qu.:1.500  \n Max.   :9.500   Max.   :6.750   Max.   :7.000   Max.   :3.500  \n NA's   :116     NA's   :615     NA's   :142     NA's   :626    \n    d9_inoc     \n Min.   :1.000  \n 1st Qu.:1.000  \n Median :1.500  \n Mean   :1.327  \n 3rd Qu.:1.500  \n Max.   :4.750  \n NA's   :169"
  },
  {
    "objectID": "cdc-exercise/code/cdcdata-exercise.html#processing",
    "href": "cdc-exercise/code/cdcdata-exercise.html#processing",
    "title": "cdcdata-exercise",
    "section": "Processing",
    "text": "Processing\nAll titre variables (d#_inoc), wt_loss, and temp are numeric, as they should be. Similarly, the ID variables Ferret and Virus are similarly loaded correctly as character. Lastly, any time variable counting days post inoculation, lethal_day, wt_loss_day, and temp_day are integers, as days are counted discretely.\nHA and NA., referring to the head and neuraminidase subtypes of the virus used in each observation, were loaded as character. While they are character variables inherently, different virus can have different combinations of HA and NA, and can be grouped by either. The type of units titres were measured with, units, is also a categorical variable, as observations can contain one of two values, “EID” or “PFU”. Thus, we can treat units, HA, and NA. as categorical, and factor them.\nAll binary variables - lethal, HPAI, and HPAI_MBAA - are loaded as characters and not as logical. We can fix that, too.\nThe following code chunk factors the categorical variables and replaces binary character variables with logical values.\n\n# first, lets factor categorical variables\nferret_IAV_data = ferret_IAV_data %&gt;%\n  mutate(\"units\" = factor(units), \"HA\" = factor(HA), \"NA.\" = factor(NA.)) \n\n# now, lets replace binary character variables with logical values\nferret_IAV_data = ferret_IAV_data %&gt;%\n  mutate(\"lethal\" = case_when(lethal == \"true\" ~ TRUE, lethal == \"false\" ~ FALSE),\n         \"HPAI\" = case_when(HPAI == \"true\" ~ TRUE, HPAI == \"false\" ~ FALSE), \n         \"HPAI_MBAA\" = case_when(HPAI_MBAA == \"true\" ~ TRUE, HPAI_MBAA == \"false\" ~ FALSE))\n\n# let's check that worked!\nstr(ferret_IAV_data)\n\n'data.frame':   717 obs. of  22 variables:\n $ Ferret     : chr  \"F1\" \"F2\" \"F3\" \"F4\" ...\n $ Virus      : chr  \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" ...\n $ units      : Factor w/ 2 levels \"EID\",\"PFU\": 1 1 1 1 1 1 1 1 1 1 ...\n $ lethal     : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ lethal_day : int  0 0 0 0 0 0 0 0 0 0 ...\n $ HPAI       : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ HPAI_MBAA  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ HA         : Factor w/ 6 levels \"H1\",\"H2\",\"H3\",..: 5 5 5 5 5 5 5 5 5 5 ...\n $ NA.        : Factor w/ 7 levels \"N1\",\"N2\",\"N3\",..: 2 2 2 2 2 2 2 2 2 5 ...\n $ wt_loss    : num  6.7 11.8 15.4 5.9 7.9 6.1 3.5 22.5 15 14.9 ...\n $ wt_loss_day: int  7 4 6 11 5 9 11 7 7 8 ...\n $ temp       : num  0.5 0.9 2 1 1 0.5 0.5 1.1 1.1 1 ...\n $ temp_day   : int  4 7 8 9 3 3 7 7 7 1 ...\n $ d1_inoc    : num  6.5 5.5 6.25 6.75 6.25 7.25 5.75 5.75 4.75 6.5 ...\n $ d2_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d3_inoc    : num  4.5 6.5 5.5 6.75 6.5 6.75 5.75 5.5 3.75 5.25 ...\n $ d4_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d5_inoc    : num  4.75 4.75 5.75 5.75 4.75 4.5 5.75 5.5 5.25 6.5 ...\n $ d6_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d7_inoc    : num  1.75 1.5 1.5 3.25 1.5 1.5 1.5 2.25 1.5 3.25 ...\n $ d8_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d9_inoc    : num  1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 ...\n\nsummary(ferret_IAV_data) #logicals are logicals and factors are factors, both with count information\n\n    Ferret             Virus           units       lethal       \n Length:717         Length:717         EID:438   Mode :logical  \n Class :character   Class :character   PFU:279   FALSE:615      \n Mode  :character   Mode  :character             TRUE :102      \n                                                                \n                                                                \n                                                                \n                                                                \n   lethal_day        HPAI         HPAI_MBAA        HA      NA.     \n Min.   : 0.000   Mode :logical   Mode :logical   H1:213   N1:315  \n 1st Qu.: 0.000   FALSE:510       FALSE:522       H2: 51   N2:260  \n Median : 0.000   TRUE :207       TRUE :195       H3:123   N3: 36  \n Mean   : 1.013                                   H5:156   N6:  9  \n 3rd Qu.: 0.000                                   H7:149   N7: 24  \n Max.   :13.000                                   H9: 25   N8:  9  \n                                                           N9: 64  \n    wt_loss        wt_loss_day          temp          temp_day   \n Min.   : 0.000   Min.   : 0.000   Min.   :0.000   Min.   : 0.0  \n 1st Qu.: 4.800   1st Qu.: 4.000   1st Qu.:1.000   1st Qu.: 1.0  \n Median : 9.200   Median : 7.000   Median :1.600   Median : 2.0  \n Mean   : 9.869   Mean   : 6.424   Mean   :1.596   Mean   : 3.1  \n 3rd Qu.:14.400   3rd Qu.: 9.000   3rd Qu.:2.200   3rd Qu.: 4.0  \n Max.   :27.500   Max.   :14.000   Max.   :4.000   Max.   :14.0  \n NA's   :2                         NA's   :4                     \n    d1_inoc         d2_inoc         d3_inoc         d4_inoc     \n Min.   :1.000   Min.   :3.500   Min.   :1.980   Min.   :1.980  \n 1st Qu.:4.800   1st Qu.:5.500   1st Qu.:4.500   1st Qu.:4.255  \n Median :5.780   Median :6.155   Median :5.320   Median :5.250  \n Mean   :5.811   Mean   :5.950   Mean   :5.284   Mean   :5.046  \n 3rd Qu.:6.750   3rd Qu.:6.500   3rd Qu.:6.250   3rd Qu.:5.750  \n Max.   :9.250   Max.   :8.750   Max.   :8.750   Max.   :7.500  \n NA's   :110     NA's   :607     NA's   :110     NA's   :607    \n    d5_inoc         d6_inoc         d7_inoc         d8_inoc     \n Min.   :1.500   Min.   :1.500   Min.   :1.000   Min.   :1.000  \n 1st Qu.:4.460   1st Qu.:3.250   1st Qu.:1.000   1st Qu.:1.500  \n Median :5.100   Median :4.500   Median :1.500   Median :1.500  \n Mean   :5.042   Mean   :4.195   Mean   :1.986   Mean   :1.573  \n 3rd Qu.:5.750   3rd Qu.:5.250   3rd Qu.:2.500   3rd Qu.:1.500  \n Max.   :9.500   Max.   :6.750   Max.   :7.000   Max.   :3.500  \n NA's   :116     NA's   :615     NA's   :142     NA's   :626    \n    d9_inoc     \n Min.   :1.000  \n 1st Qu.:1.000  \n Median :1.500  \n Mean   :1.327  \n 3rd Qu.:1.500  \n Max.   :4.750  \n NA's   :169    \n\n#note that we could have accomplished both in the same \"pipe\" - I've separated them here to make it clear what manipulation is being preformed on which columns :)\n\nNow, let’s think about our units variable. “PFU” and “EID50” are both measurements of virus titres, but come from different titration methods - essentially, this means that they cannot be compared.\nI’d like to make some correlations between virus titres and other variables included in the dataset. I can’t do that with a mixture of titration methods! So, I am only going to include observations where viral titres were measured via the titration method with the greatest number of observations.\nIn the following code chunk, I determine which titration unit, “PFU” or “EID”, has the greatest number of observations. Then, I am going to filter my dataset to only include observations where titres are measured with that method. I’ll keep that variable around, though there will only be observations for one factor level, just as a reminder which units the titres are measured in.\n\n# which factor level of units has the greatest number of observations? \nunits.counts = (summary(ferret_IAV_data$units)) #a named vector of counts of the number of observations for each level of variable \"units\"\nwhich.units.max = names(units.counts)[which.max(units.counts)] #the name of the level of variable \"units\" with the greatest number of observations\n\n# filtering for observations with titres given in units which.units.max \nferret_IAV_data = ferret_IAV_data %&gt;%\n  filter(units == which.units.max)\n\n# let's check that worked!\nstr(ferret_IAV_data)\n\n'data.frame':   438 obs. of  22 variables:\n $ Ferret     : chr  \"F1\" \"F2\" \"F3\" \"F4\" ...\n $ Virus      : chr  \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" ...\n $ units      : Factor w/ 2 levels \"EID\",\"PFU\": 1 1 1 1 1 1 1 1 1 1 ...\n $ lethal     : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ lethal_day : int  0 0 0 0 0 0 0 0 0 0 ...\n $ HPAI       : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ HPAI_MBAA  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ HA         : Factor w/ 6 levels \"H1\",\"H2\",\"H3\",..: 5 5 5 5 5 5 5 5 5 5 ...\n $ NA.        : Factor w/ 7 levels \"N1\",\"N2\",\"N3\",..: 2 2 2 2 2 2 2 2 2 5 ...\n $ wt_loss    : num  6.7 11.8 15.4 5.9 7.9 6.1 3.5 22.5 15 14.9 ...\n $ wt_loss_day: int  7 4 6 11 5 9 11 7 7 8 ...\n $ temp       : num  0.5 0.9 2 1 1 0.5 0.5 1.1 1.1 1 ...\n $ temp_day   : int  4 7 8 9 3 3 7 7 7 1 ...\n $ d1_inoc    : num  6.5 5.5 6.25 6.75 6.25 7.25 5.75 5.75 4.75 6.5 ...\n $ d2_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d3_inoc    : num  4.5 6.5 5.5 6.75 6.5 6.75 5.75 5.5 3.75 5.25 ...\n $ d4_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d5_inoc    : num  4.75 4.75 5.75 5.75 4.75 4.5 5.75 5.5 5.25 6.5 ...\n $ d6_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d7_inoc    : num  1.75 1.5 1.5 3.25 1.5 1.5 1.5 2.25 1.5 3.25 ...\n $ d8_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d9_inoc    : num  1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 ...\n\nsummary(ferret_IAV_data)\n\n    Ferret             Virus           units       lethal       \n Length:438         Length:438         EID:438   Mode :logical  \n Class :character   Class :character   PFU:  0   FALSE:348      \n Mode  :character   Mode  :character             TRUE :90       \n                                                                \n                                                                \n                                                                \n                                                                \n   lethal_day        HPAI         HPAI_MBAA        HA      NA.     \n Min.   : 0.000   Mode :logical   Mode :logical   H1: 73   N1:214  \n 1st Qu.: 0.000   FALSE:231       FALSE:243       H2: 51   N2:119  \n Median : 0.000   TRUE :207       TRUE :195       H3: 25   N3: 36  \n Mean   : 1.429                                   H5:156   N6:  9  \n 3rd Qu.: 0.000                                   H7:112   N7: 24  \n Max.   :13.000                                   H9: 21   N8:  9  \n                                                           N9: 27  \n    wt_loss        wt_loss_day          temp          temp_day     \n Min.   : 0.000   Min.   : 0.000   Min.   :0.000   Min.   : 0.000  \n 1st Qu.: 4.200   1st Qu.: 4.000   1st Qu.:1.100   1st Qu.: 1.000  \n Median : 9.000   Median : 7.000   Median :1.700   Median : 2.000  \n Mean   : 9.803   Mean   : 6.194   Mean   :1.694   Mean   : 3.292  \n 3rd Qu.:15.000   3rd Qu.: 8.000   3rd Qu.:2.300   3rd Qu.: 5.000  \n Max.   :27.200   Max.   :14.000   Max.   :4.000   Max.   :12.000  \n NA's   :1                         NA's   :2                       \n    d1_inoc         d2_inoc         d3_inoc         d4_inoc     \n Min.   :1.980   Min.   :3.500   Min.   :1.980   Min.   :1.980  \n 1st Qu.:4.500   1st Qu.:5.312   1st Qu.:4.750   1st Qu.:4.319  \n Median :5.500   Median :5.750   Median :5.750   Median :5.500  \n Mean   :5.518   Mean   :5.832   Mean   :5.492   Mean   :5.112  \n 3rd Qu.:6.500   3rd Qu.:6.500   3rd Qu.:6.500   3rd Qu.:6.125  \n Max.   :9.250   Max.   :8.750   Max.   :8.750   Max.   :7.500  \n NA's   :94      NA's   :344     NA's   :94      NA's   :344    \n    d5_inoc         d6_inoc         d7_inoc        d8_inoc         d9_inoc     \n Min.   :1.500   Min.   :1.500   Min.   :1.50   Min.   :1.500   Min.   :1.500  \n 1st Qu.:4.500   1st Qu.:3.250   1st Qu.:1.50   1st Qu.:1.500   1st Qu.:1.500  \n Median :5.250   Median :4.500   Median :1.98   Median :1.500   Median :1.500  \n Mean   :5.236   Mean   :4.142   Mean   :2.44   Mean   :1.583   Mean   :1.565  \n 3rd Qu.:6.250   3rd Qu.:5.250   3rd Qu.:3.25   3rd Qu.:1.500   3rd Qu.:1.500  \n Max.   :9.500   Max.   :6.750   Max.   :7.00   Max.   :3.500   Max.   :4.750  \n NA's   :99      NA's   :352     NA's   :122    NA's   :363     NA's   :148    \n\n\nIt seems that the majority of titres were measured in EID units (meaning that titrations were done in eggs!), so only observations where titres were measured in EID are being included in the processed dataset. Please note that all observations and variables remain in the file “cdc-exercise/data/IAV_morbidity_and_titer_measurements_ferrets.csv”, so we can reconduct this processing and analysis excluding all observations measured in EID instead, if we want!\nAt this point, we should have 438 observations remaining.\nLastly, looking at the column lethal_day, ferrets that survived there infection are given a 0 for lethal_day. But that will skew our data quite a bit toward early lethality! So, I want to replace all “0” values for lethal_day with “NA”.\n\nferret_IAV_data = ferret_IAV_data %&gt;%\n  mutate(lethal_day = case_when(lethal_day == 0 ~ NA, .default = lethal_day))"
  },
  {
    "objectID": "cdc-exercise/code/cdcdata-exercise.html#this-section-is-contributed-by-taylor-glass.",
    "href": "cdc-exercise/code/cdcdata-exercise.html#this-section-is-contributed-by-taylor-glass.",
    "title": "cdcdata-exercise",
    "section": "This section is contributed by Taylor Glass.",
    "text": "This section is contributed by Taylor Glass.\nI am going to make a synthetic data set to mirror this descriptive analysis by selecting 12 variables used to create the descriptive plots. I need an ID for the inoculated Ferret, an ID for the Virus used to inoculate it, whether the infection was lethal, if the infection was lethal, when the ferret died (lethal_day), whether the virus is a highly virulant avian HPAI, if the virus is highly virulent HPAI, whether it has a multi-basic amino acid cleavage site at HA, or an HPAI_MBAA, the identity of the virus’s HA and NA subtypes, the maximum percentage wt_loss of the ferret and which day this maximum was measured (wt_loss_day), and the maximum temperature temp of the ferret and which day this maximum was measured (temp_day). I will not generate a time series column because the code included in the descriptive analysis is only a skeleton, so I would have nothing to compare it to.\nTo get started, I asked ChatGPT 3.5 to create R code for a synthetic data set with these 12 variables by copying the previous paragraph into the AI tool and specifically asking for R code.\n\n## load packages\nlibrary(dplyr)\n\n## set seed for reproducibility\nset.seed(123)\n\n## original R code provided by ChatGPT\n# set number of observations\nn &lt;- 100\n# generate synthetic data\ndata &lt;- tibble(\n  Ferret_ID = 1:n,\n  Virus_ID = sample(1:10, n, replace = TRUE),\n  lethal = sample(c(\"Yes\", \"No\"), n, replace = TRUE),\n  lethal_day = ifelse(lethal == \"Yes\", sample(1:10, n, replace = TRUE), NA),\n  HPAI = sample(c(\"Yes\", \"No\"), n, replace = TRUE),\n  HPAI_MBAA = ifelse(HPAI == \"Yes\", sample(c(\"Yes\", \"No\"), n, replace = TRUE), NA),\n  HA_subtype = sample(c(\"H1\", \"H3\", \"H5\", \"H7\", \"H9\"), n, replace = TRUE),\n  NA_subtype = sample(c(\"N1\", \"N2\", \"N5\", \"N7\", \"N9\"), n, replace = TRUE),\n  wt_loss = rnorm(n, mean = 20, sd = 5),\n  wt_loss_day = sample(1:10, n, replace = TRUE),\n  temp = rnorm(n, mean = 38, sd = 0.5),\n  temp_day = sample(1:10, n, replace = TRUE)\n)\n# print the first few rows of the synthetic dataset\nprint(head(data))\n\n# A tibble: 6 × 12\n  Ferret_ID Virus_ID lethal lethal_day HPAI  HPAI_MBAA HA_subtype NA_subtype\n      &lt;int&gt;    &lt;int&gt; &lt;chr&gt;       &lt;int&gt; &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;     \n1         1        3 No             NA No    &lt;NA&gt;      H9         N9        \n2         2        3 No             NA No    &lt;NA&gt;      H3         N7        \n3         3       10 Yes             7 No    &lt;NA&gt;      H1         N7        \n4         4        2 No             NA No    &lt;NA&gt;      H7         N7        \n5         5        6 Yes             1 Yes   No        H3         N9        \n6         6        5 Yes             9 No    &lt;NA&gt;      H3         N7        \n# ℹ 4 more variables: wt_loss &lt;dbl&gt;, wt_loss_day &lt;int&gt;, temp &lt;dbl&gt;,\n#   temp_day &lt;int&gt;\n\n\nThe head of the new synthetic data set indicates that the ifelse statements were successful because there are NA values in the ‘lethal_day’ and ‘HPAI_MBAA’ variables. This makes sense because not every ferret died and not every HPAI virus had a multi-basic amino acid cleavage site at HA.\nThis data set is sufficient for modeling the original data set, but I made a few modifications to make it more similar to the real data. I want to include the same number of observations as the original data set, which is an easy change. The original synthetic data included 10 different virus IDs, but there are 83 different viral strands included in the real data. The real HA variable is a factor with 6 levels, and the real NA variable is a factor with 7 levels. I added 1 option to the HA_subtype variable and 2 options to the NA_subtype variable. I updated the ‘wt_loss’ and ‘temp’ variables with the true means and standard deviations of the real data. The real study was conducted over 14 days, so I made that change as well for the ‘wt_loss_day’ and ‘temp_day’ variables.\nI returned to this code after generating the first few plots and added probabilities to the ‘lethal’ and ‘HPAI’ variables. I was originally getting an even distribution for both of these variables in the synthetic data, which does not accurately portray the real data. Adding these probabilities increased the accuracy of the synthetic data compared to the real data.\n\n# explore real data to make synthetic data more accurate \ndim(ferret_IAV_data)\n\n[1] 438  23\n\ntable(ferret_IAV_data$Virus) \n\n\n                      A/Albany/6/1958                      A/Alberta/1/2014 \n                                    6                                     3 \n     A/AmWigeon/SC/22-000345-001/2021               A/Anhui-Lujiang/39/2018 \n                                    6                                     9 \n               A/Bangladesh/5487/2011 A/BarnSwallow/Hong Kong/D10-1161/2010 \n                                    3                                     6 \n             A/Cambodia/X0123311/2013              A/Cambodia/X0810301/2013 \n                                    3                                     3 \n                    A/Canada/504/2004                A/canine/IL/12191/2015 \n                                    6                                     3 \n           A/chicken/Indonesia/7/2003               A/chicken/Korea/ES/2003 \n                                    3                                     3 \n           A/chicken/Korea/Gimje/2008               A/chicken/Korea/IS/2006 \n                                    3                                     3 \n           A/chicken/PA/298101-4/2004      A/chicken/Texas/18-007912-2/2018 \n                                    6                                     3 \n       A/chicken/Vietnam/NCVD/31/2004                 A/ck/CT/260413-2/2003 \n                                    3                                     6 \n             A/ck/TN/17-007147-2/2017              A/ck/TN/17-007431-3/2017 \n                                    3                                     3 \n               A/duck/Alberta/35/1976         A/duck/Bangladesh/19D770/2017 \n                                    9                                     3 \n        A/duck/New York/15024-21/1996         A/duck/Vietnam/NCVD-0004/2013 \n                                    9                                     3 \n        A/duck/Vietnam/NCVD-1206/2012         A/duck/Vietnam/NCVD-1232/2012 \n                                    6                                     3 \n        A/duck/Vietnam/NCVD-2848/2013          A/duck/Vietnam/NCVD-672/2011 \n                                    3                                     3 \n             A/Egypt/2321-NAMRU3/2007              A/Egypt/4935-NAMRU3/2009 \n                                    3                                     3 \n                  A/Egypt/N03072/2010                  A/El Salvador/2/1957 \n                                    3                                     6 \n                    A/England/10/1967         A/goose/Nebraska/17096-1/2011 \n                                    9                                     3 \n             A/goose/Vietnam/113/2001              A/Guangdong/17SF003/2016 \n                                    3                                     6 \n          A/gyrfalcon/WA/41088-6/2014                 A/Hong Kong/1073/1999 \n                                    3                                     6 \n                 A/Hong Kong/213/2003                  A/Hong Kong/308/2014 \n                                    6                                     6 \n                A/Hong Kong/4553/2016                  A/Hong Kong/486/1997 \n                                    6                                     8 \n                   A/Indonesia/5/2005               A/Indonesia/CDC625/2006 \n                                   20                                     3 \n                       A/Italy/3/2013            A/Mallard/Alberta/119/1998 \n                                    3                                     3 \n          A/mallard/Maryland/235/2001          A/mallard/New York/6750/1978 \n                                    6                                     9 \n                   A/Mexico/4482/2009                    A/Mexico/7218/2012 \n                                   20                                     3 \n                  A/Minnesota/11/2010                   A/Nanchang/933/1995 \n                                    3                                     3 \n               A/Netherlands/219/2003                A/Netherlands/230/2003 \n                                    9                                    12 \n              A/New Caledonia/20/1999                   A/New York/107/2003 \n                                    7                                    19 \n                  A/New York/108/2016                    A/New York/55/2004 \n                                    6                                     7 \n     A/Northern pintail/WA/40964/2014                    A/Panama/2007/1999 \n                                    3                                     3 \n                 A/Sichuan/26221/2014             A/Solomon Islands/03/2006 \n                                    3                                     3 \n                A/South Dakota/6/2007               A/swine/MO/2124514/2006 \n                                   16                                     6 \n              A/swine/MO/4296424/2006                       A/Taiwan/1/2017 \n                                    3                                     6 \n                   A/Thailand/16/2004               A/Thailand/Kan/353/2004 \n                                    3                                     3 \n                 A/Thailand/SP83/2004  A/turkey/California/18-031151-4/2018 \n                                    3                                     3 \n           A/Turkey/Indiana/1403/2016         A/Turkey/Indiana/1573-02/2016 \n                                    3                                     3 \n            A/turkey/Kansas/4880/1980         A/turkey/Minnesota/10915/2015 \n                                    3                                     3 \n                A/turkey/SD/7034/1986                 A/Turkey/VA/4529/2002 \n                                    3                                     9 \n                    A/Victoria/3/1975                   A/Vietnam/1203/2004 \n                                    6                                    11 \n                  A/Vietnam/1204/2004                A/Vietnam/HN30408/2005 \n                                    3                                     3 \n                A/Vietnam/VP12-3/2012               A/Vietnam/VP13-28H/2013 \n                                    3                                     3 \n                  A/Yunnan/14563/2015 \n                                    3 \n\nstr(ferret_IAV_data)\n\n'data.frame':   438 obs. of  23 variables:\n $ Ferret     : chr  \"F1\" \"F2\" \"F3\" \"F4\" ...\n $ Virus      : chr  \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" \"A/Turkey/VA/4529/2002\" ...\n $ units      : Factor w/ 2 levels \"EID\",\"PFU\": 1 1 1 1 1 1 1 1 1 1 ...\n $ lethal     : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ lethal_day : int  NA NA NA NA NA NA NA NA NA NA ...\n $ HPAI       : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ HPAI_MBAA  : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ HA         : Factor w/ 6 levels \"H1\",\"H2\",\"H3\",..: 5 5 5 5 5 5 5 5 5 5 ...\n $ NA.        : Factor w/ 7 levels \"N1\",\"N2\",\"N3\",..: 2 2 2 2 2 2 2 2 2 5 ...\n $ wt_loss    : num  6.7 11.8 15.4 5.9 7.9 6.1 3.5 22.5 15 14.9 ...\n $ wt_loss_day: int  7 4 6 11 5 9 11 7 7 8 ...\n $ temp       : num  0.5 0.9 2 1 1 0.5 0.5 1.1 1.1 1 ...\n $ temp_day   : int  4 7 8 9 3 3 7 7 7 1 ...\n $ d1_inoc    : num  6.5 5.5 6.25 6.75 6.25 7.25 5.75 5.75 4.75 6.5 ...\n $ d2_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d3_inoc    : num  4.5 6.5 5.5 6.75 6.5 6.75 5.75 5.5 3.75 5.25 ...\n $ d4_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d5_inoc    : num  4.75 4.75 5.75 5.75 4.75 4.5 5.75 5.5 5.25 6.5 ...\n $ d6_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d7_inoc    : num  1.75 1.5 1.5 3.25 1.5 1.5 1.5 2.25 1.5 3.25 ...\n $ d8_inoc    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ d9_inoc    : num  1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 ...\n $ subtype    : Factor w/ 15 levels \"H1N1\",\"H2N2\",..: 10 10 10 10 10 10 10 10 10 12 ...\n\nsummary(ferret_IAV_data$wt_loss)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  0.000   4.200   9.000   9.803  15.000  27.200       1 \n\nsd(ferret_IAV_data$wt_loss, na.rm = TRUE)\n\n[1] 6.957058\n\nsummary(ferret_IAV_data$temp)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  0.000   1.100   1.700   1.694   2.300   4.000       2 \n\nsd(ferret_IAV_data$temp, na.rm = TRUE)\n\n[1] 0.7716429\n\nrange(ferret_IAV_data$wt_loss_day)\n\n[1]  0 14\n\n# set seed for reproducibility \nset.seed(125)\n\n# set number of observations\nn &lt;- 438 #match the number of observations from the original data set\n\n# generate synthetic data\ndata2 &lt;- tibble(\n  Ferret_ID = 1:n,\n  Virus_ID = sample(1:83, n, replace = TRUE), #increase number of viral strand options\n  lethal = sample(c(\"Yes\", \"No\"), n, replace = TRUE, prob = c(0.2, 0.8)),\n  lethal_day = ifelse(lethal == \"Yes\", sample(1:10, n, replace = TRUE), NA),\n  HPAI = sample(c(\"Yes\", \"No\"), n, replace = TRUE, prob = c(0.9, 0.1)),\n  HPAI_MBAA = ifelse(HPAI == \"Yes\", sample(c(\"Yes\", \"No\"), n, replace = TRUE), NA),\n  HA_subtype = sample(c(\"H1\", \"H3\", \"H5\", \"H7\", \"H9\", \"H11\"), n, replace = TRUE), #add another level\n  NA_subtype = sample(c(\"N1\", \"N2\", \"N5\", \"N7\", \"N9\", \"N10\", \"N12\"), n, replace = TRUE), #add 2 more level\n  wt_loss = rnorm(n, mean = 9.803, sd = 6.957), #true mean and sd from the data\n  wt_loss_day = sample(1:14, n, replace = TRUE), #real study time period\n  temp = rnorm(n, mean = 1.694, sd = 0.772), #true mean and sd from the data\n  temp_day = sample(1:14, n, replace = TRUE) #real study time period\n)\n# print the first few rows of the synthetic data set\nprint(head(data))\n\n# A tibble: 6 × 12\n  Ferret_ID Virus_ID lethal lethal_day HPAI  HPAI_MBAA HA_subtype NA_subtype\n      &lt;int&gt;    &lt;int&gt; &lt;chr&gt;       &lt;int&gt; &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;     \n1         1        3 No             NA No    &lt;NA&gt;      H9         N9        \n2         2        3 No             NA No    &lt;NA&gt;      H3         N7        \n3         3       10 Yes             7 No    &lt;NA&gt;      H1         N7        \n4         4        2 No             NA No    &lt;NA&gt;      H7         N7        \n5         5        6 Yes             1 Yes   No        H3         N9        \n6         6        5 Yes             9 No    &lt;NA&gt;      H3         N7        \n# ℹ 4 more variables: wt_loss &lt;dbl&gt;, wt_loss_day &lt;int&gt;, temp &lt;dbl&gt;,\n#   temp_day &lt;int&gt;\n\n\nNow that I have an accurate synthetic data set, I can create some of the plots originally used to explore the data. I will explore lethality first with a simple histogram. The synthetic data produced approximately 79 deaths and 360 survivals, and the real data only had 90 deaths compared to 348 survivals. After creating a boxplot to display how many days each ferret that died survived, the mean survival time was about 6 days for 79 lethal observations, compared to the real findings of a mean survival time around 7 days for 90 lethal observations.\n\n## create visualization of ferret death\nhist1 &lt;- ggplot(data2, aes(x=lethal)) + \n            geom_bar() +\n            labs(x= \"Ferret Death\",\n                 y= \"Frequency\", \n                 title = \"Synthetic Data Ferret Death\")\nhist1\n\n\n\n## compare with the same plot of the real data\nplot1\n\n\n\n## create visualization of mean survival time among ferrets that died \nboxplot1 &lt;- data2 %&gt;% \n            filter(lethal == \"Yes\") %&gt;% \n            ggplot() + \n            geom_boxplot(aes(y = lethal_day)) + \n            annotate(geom = \"text\", x = 0, y = 7.5, label = paste(sum(data2$lethal==\"Yes\"), \"lethal                         observations\")) +\n            labs(x = \"Ferret Death\",\n                 y = \"Days Survived\",\n                 title = \"Synthetic Data Days Survived\")\nboxplot1\n\n\n\n## compare with the same plot of the real data\nplot2\n\n\n\n\nI explored how many of the virulent strains are highly pathogenic in the synthetic data set next. The synthetic data showed 72 highly pathogenic HPAI strands among ferrets that died compared to 7 dead ferrets without highly pathogenic HPAI strands. This is similar to the 89 observations of highly pathogenic viruses in dead ferrets compared to 1 non-highly pathogenic virus in dead ferrets that was recorded in the real data set. The synthetic data differs from the real data when exploring how many ferrets infected with highly pathogenic HPAI strands. Only 72 ferrets infected with HPAI died and 323 survived compared to 89 ferrets infected with HPAI dying and 118 ferrets surviving in the real data set.\n\n## create visualization of dead ferrets with HPAI strands\nhist2 &lt;- data2 %&gt;%\n            select(\"HPAI\", \"lethal\") %&gt;%\n            filter(lethal == \"Yes\") %&gt;%\n            ggplot() + geom_bar(aes(x = HPAI, y = (..count..)/sum(..count..))) + \n            stat_count(geom = \"text\", colour = \"black\", size = 3.5, aes(x = HPAI, label = paste(..count.., \"observations\"), y = ..count../(sum(data2$lethal==\"Yes\")))) +\n            labs(x = \"Highly Pathogenic HPAI\", \n                 y = \"Frequency\", \n                 title = \"Synthetic Data Dead Ferrets with Highly Pathogenic HPAI\")\nhist2\n\n\n\n## compare with the same plot of the real data\nplot3\n\n\n\n## create visualization of HPAI strands in dead ferrets\nhist3 &lt;- data2 %&gt;%\n            select(\"HPAI\", \"lethal\") %&gt;%\n            filter(HPAI == \"Yes\") %&gt;%\n            ggplot() + geom_bar(aes(x = lethal, y = (..count..)/sum(..count..))) + \n            stat_count(geom = \"text\", colour = \"white\", size = 3.5, aes(x = lethal, label = paste(..count.., \"observations\"), y = ..count../(2*sum(data2$HPAI==\"Yes\")))) +\n            labs(x = \"Dead Ferrets\", \n                 y = \"Frequency\", \n                 title = \"Synthetic Data Percentage Ferrets Infected with Highly Pathogenic HPAI that Died\")\nhist3\n\n\n\n## compare with the same plot of the real data\nplot4\n\n\n\n\nI also wanted to explore a couple of the descriptive questions that were answered with the real data set. First, what is the distribution of NA and HA subtypes? How do those subtypes appear in combination? I had to add a new variable to the synthetic data set to mimic what was done to the real data set. These plots differ a lot between the synthetic data and the real data because the synthetic data has many more combinations of HA and NA subtypes with a much higher proportion of each subtype being classified as HPAI. I think the synthetic data created more subtypes that do not actually exist in the real world considering that there are only 15 subtype combination shown in the real data, which would explain why the distributions look different.\n\n# add new subtype variable\ndata2 &lt;- data2 %&gt;% \n          mutate(subtype = as.factor(paste0(HA_subtype,NA_subtype)))  \n\n# create visualization of viral subtype combinations and HPAI classification\nboxplot2 &lt;- data2 %&gt;%\n            ggplot() + \n            geom_bar(aes(x = subtype, y = ..count../sum(..count..), fill = HPAI)) +  #kept the same colors\n            stat_count(geom = \"text\", colour = \"white\", size = 2.5, aes(x = subtype, label = ..count.., y = ..count../(2*length(data2$subtype)))) +\n            labs(x = \"Subtype\", \n                 y = \"Proportion\", \n                 title = \"Synthetic Data Proportion of Inoculated Influenza A Subtypes\" )\nboxplot2\n\n\n\n## compare with the same plot of the real data\nplot8\n\n\n\n\nI explored how much weight loss each ferret exhibited and stratified that based on lethal status in the synthetic data as was done for the real data. The synthetic data plot shows a more consistence percentage of weight loss around 10% across the 14 day time period while the real data shows an increase in weight loss percentage over the first 4 days before the average hovers around 10% for the remainder of the time. Additionally, the real data boxplots show that ferrets that died had higher weight loss based on the blue dots, but that trend is not seen in the synthetic data. I think the reason for this discrepancy is that there is a correlation because weight loss and lethality that was not accounted for in the synthetic data.\n\n## create visualization of the weight loss in ferrets over 14 days\nboxplot3 &lt;- ggplot() + \n            geom_boxplot(data = data2, aes(x = wt_loss_day, y = wt_loss, group = wt_loss_day)) +\n            geom_point(data = data2, aes(x = wt_loss_day, y = wt_loss, col = lethal), alpha = 0.5) +\n            labs( x = \"Day of Maximum Weight Loss\", \n                  y = \"Percentage Weight Loss\", \n                  title = \"Synthetic Data Max Percentage Weight Loss By Day\")\nboxplot3\n\n\n\n## compare with the same plot of the real data\nplot9\n\nWarning: Removed 1 rows containing non-finite values (`stat_boxplot()`).\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nLastly, I would expect there to be no correlation between weight loss day and day of maximum temperature in the synthetic data because there is no correlation between these two variables in the real data. These expectation were met based on the ‘scatter1’ plot.\n\n## create visualization of correlation between weight loss day and maximum temperature day\nscatter1 &lt;- ggplot() + \n            geom_point(data = data2, aes(x = wt_loss_day, y = temp_day, col = lethal))\nscatter1\n\n\n\n## compare with the same plot of the real data\nplot11 = ggplot() + geom_point(data = ferret_IAV_data, aes(x = wt_loss_day, y = temp_day, col = lethal))\n\nOverall, the synthetic data did a sufficient job of modeling the real data in terms of how many ferrets died and which ones had the highly pathogenic HPAI strands because the probability of each of these variables was accounted for. The least successful synthetic data plot came from subtypes of viral strands based on the different number of combinations between the synthetic and real data. I think this could be improved if there was a way to account for the 15 subtype combinations that actually exist in the real data."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cora’s Website and Data Analysis Portfolio",
    "section": "",
    "text": "Then he who would be a master of the art [of rhetoric] must understand the real nature of everything; or he will never know either how to make the gradual departure from truth into the opposite of truth which is effected by the help of resemblances, or how to avoid it?\n– Plato, Phaedrus\n\n \n  \n   \n  \n    \n     LinkedIn\n  \n  \n    \n     GitHub\n  \n  \n    \n     Email\n  \n\n\n\n\nHello, friend!\nWelcome to my website and data analysis portfolio for the Spring 2024 Modern Applied Data Analysis (MADA) course.\n\nPlease use the Menu Bar above to navigate to our various data analysis and technical projects. Projects will be added throughout the semester, so check back in to see what’s new!\nHave fun! And feel free to contact me with questions, comments, feedback, etc.\n\n\nPerhaps I’ll add some pages for projects I’ve completed during my graduate coursework in Ecology, Population Biology, and Evolution, to help study for qualifying exams. Maybe I’ll exapt this site to note and share theories and techniques I find particularly interesting. I suppose we’ll see…\n…regardless, welcome! 🙂"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "#install.packages(\"here\")\nlibrary(here)\n\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n#install.packages(\"dplyr\")\nlibrary(dplyr)\n\n#install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n#install.packages(\"kableExtra\")"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#loading-the-dataset",
    "href": "presentation-exercise/presentation-exercise.html#loading-the-dataset",
    "title": "Presentation Exercise",
    "section": "Loading the dataset",
    "text": "Loading the dataset\nThe following codechunk loads the SEDA datasets:\n\n# load mean scores by state\nscores_state2023 = read.csv(here(\"data\", \"seda2023_state_ys.csv\")) #test score data by state\n\n# load mean scores by counties within states\nscores_admindis2023 = read.csv(here(\"data\", \"seda2023_admindist_ys.csv\")) #test score data by county"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#subsetting-and-generating-relavent-information",
    "href": "presentation-exercise/presentation-exercise.html#subsetting-and-generating-relavent-information",
    "title": "Presentation Exercise",
    "section": "Subsetting and generating relavent information",
    "text": "Subsetting and generating relavent information\nThe following codechunk processes the SEDA data to obtain three time series of the average math test scores across all subgroups for 1) Weakley County, 2) Tennessee, and 3) the US.\n\n### Weakley Country mean test scores by year\n# create subset of district scores dataset for Weakley County, TN, only \nweakley_county = scores_admindis2023 %&gt;%\n  filter(stateabb == \"TN\", sedaadminname == \"Weakley County\", subject == \"mth\" ) %&gt;% #filter for weakley county math data\n  select(\"stateabb\", \"sedaadminname\", \"subject\", \"subgroup\",  #include state, county, and subject name to ensure the filters were correct; include subgroup to filter on the poor\n        colnames(scores_admindis2023)[grep( '_ol$', colnames(scores_admindis2023))])\n\n# let's see how this looks \nhead(weakley_county) #missing 2016 data is curious. I'll have to come back to this.\n\n  stateabb  sedaadminname subject subgroup ys_mn_2016_ol ys_mn_2017_ol\n1       TN Weakley County     mth      all            NA   -0.04134371\n2       TN Weakley County     mth      ecd            NA   -0.31809371\n3       TN Weakley County     mth      nec            NA    0.13446430\n4       TN Weakley County     mth      wht            NA    0.02672900\n  ys_mn_2018_ol ys_mn_2019_ol ys_mn_2022_ol ys_mn_2023_ol ys_mn_1922_ol\n1    0.02434486    0.07254493   -0.02776205     0.1748283   -0.10030698\n2   -0.25630497   -0.22634657   -0.41122632    -0.1350673   -0.18487975\n3    0.20263028    0.26241854    0.21583720     0.3716923   -0.04658134\n4    0.06999616    0.13601488    0.04206806     0.2278517   -0.09394683\n  ys_mn_1923_ol ys_mn_2223_ol\n1    0.10228333     0.2025903\n2    0.09127931     0.2761591\n3    0.10927373     0.1558551\n4    0.09183686     0.1857837\n\n# I want to remove the measurements from 1922, 1923, and 2223\nweakley_county = weakley_county %&gt;%\n  select(-c(\"ys_mn_1922_ol\", \"ys_mn_1923_ol\", \"ys_mn_2223_ol\")) # I couldn't think of a clever way to use grep to do this, oh well!\n\n### Tenessee and US mean test scores by Year\n## US\n# First, I am creating a vector of the columns (mean scores for each state, by year) for which to take the mean across all states\nscore_column_names = colnames(scores_state2023)[grep( '_ol$', colnames(scores_state2023))]\nscore_column_names = score_column_names[-grep(\"ys_mn_1922_ol|ys_mn_1923_ol|ys_mn_2223_ol\", score_column_names)] #yes, i'm doing it this way so that if any columns had been added to the dataset, I wouldn't have to readjust the indices!\n\n# vector of US means by Year\nUS_means = scores_state2023 %&gt;%\n  filter(subgroup==\"all\") %&gt;%\n  select(colnames(scores_state2023)[grep('^ys_mn_20.*._ol$', colnames(scores_state2023))]) %&gt;%\n  colMeans(na.rm = T)\n\n\n## TN\n# vector of TN means by year \nTN_means = scores_state2023 %&gt;%\n  filter(stateabb == \"TN\") %&gt;%\n  filter( subgroup == \"all\") %&gt;%\n  select(colnames(scores_state2023)[grep('^ys_mn_20.*._ol$', colnames(scores_state2023))]) %&gt;%\n  #I figured out how to exclude the 22__ and 19__ years!\n  colMeans(na.rm=T)\n\n# now I need a data frame that puts this data into longform by subgroup; that is, I need to repeat a vector of the years scores were collected the number of times we have subgroups, i.e c(2016,2017,2018,2019...2016,2017,2018,2019...); the subgroups we have EACH the number of years that were observed, i.e (all, all, all, all...wht, wht, wht....); and the scores we have across the year columns need to be collapsed into a vector of c(subgroup 1 measurements across years, subgroup 2 measurements across years...)\n\nyears = c(2016,2017,2018,2019,2022,2023)\n\ntimeseries_weakley_county = data.frame(\"Year\" = rep(years, times = length(weakley_county$subgroup)),\n                \"Subgroup\" = rep(weakley_county$subgroup, each = length(years)),\n                \"dis_score\" = as.vector(t(weakley_county[,grep( '_ol$', colnames(weakley_county))])),  #the grep function returns the indices of the vector elements which match some pattern; adding $ to the end of my pattern returns elements that END WITH the pattern! #the t() function transposes my dataframe so that the functionas.vector, which converts a dataframe into a vector columnwise, will instead return the vector rowwise\n                \"state_score\" = rep(TN_means, times = length(weakley_county$subgroup)),\n                \"US_score\" = rep(US_means, times = length(weakley_county$subgroup)))\n\nNotice how I generated a long-form dataframe, with a column for “Year” and three columns for Weakley, Tennessee, and US scores, for ease of ggplotting. :)\nWe can see how easy it is to group our time series data in the simple plots generated by the code chunk below.\n\nplot1 = ggplot() + geom_point(data=timeseries_weakley_county, aes(x=Year, y = dis_score, col = Subgroup)) + \n  geom_line(data=timeseries_weakley_county, aes(x=Year, y = dis_score, col = Subgroup)) + \n  geom_line(data=timeseries_weakley_county, aes(x=Year, y = state_score), alpha = 0.5, linetype = \"dashed\") +\n  geom_line(data=timeseries_weakley_county, aes(x=Year, y = US_score), alpha = 0.5, linetype = \"dotted\")\n\nfigure_file = here(\"figures\",\"simple_lineplot.png\")\nggsave(filename = figure_file, plot=plot1) \n\n\n\n\n\n\nFigure 2: A simple lineplot showing the data to be plotted using AI, but stratified by subgroup\n\n\n\n\nI am going to use CoPilot to turn Figure 2 into a close rendition of Figure 1."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "Cassia Roth contributed to this project\nThe structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nCat Breed\n0\n1\nFALSE\n4\nAS: 3, S: 3, MC: 2, P: 1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.666667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.111111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nCat Age\n0\n1\nNA\nNA\nNA\n6.333333\n5.09902\n1\n2\n5\n9\n17\n▇▃▃▁▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/chirst/Desktop/Git/corahirst-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  factor                   2     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique\n1 Gender                0             1 FALSE          3\n2 Cat Breed             0             1 FALSE          4\n  top_counts              \n1 M: 4, F: 3, O: 2        \n2 AS: 3, S: 3, MC: 2, P: 1\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate   mean    sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.   16.0  133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1  21.2   45  55  70  80  110 ▇▂▃▂▂\n3 Cat Age               0             1   6.33  5.10   1   2   5   9   17 ▇▃▃▁▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/chirst/Desktop/Git/corahirst-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height                       &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\",…\n$ Weight                       &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000…\n$ Gender                       &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", …\n$ `First Letter of Cat's Name` &lt;chr&gt; \"A\", \"A\", \"Z\", \"D\", \"B\", \"D\", \"P\", \"T\", \"…\n$ `Cat Age (yr)`               &lt;dbl&gt; 5, 7, 3, 2, 4, 9, 2, 10, 15, 3, 3, 17, 4,…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n First Letter of Cat's Name  Cat Age (yr)   \n Length:14                  Min.   : 1.000  \n Class :character           1st Qu.: 3.000  \n Mode  :character           Median : 4.000  \n                            Mean   : 6.071  \n                            3rd Qu.: 8.500  \n                            Max.   :17.000  \n                                            \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender `First Letter of Cat's Name` `Cat Age (yr)`\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                                 &lt;dbl&gt;\n1 180        80 M      A                                         5\n2 175        70 O      A                                         7\n3 sixty      60 F      Z                                         3\n4 178        76 F      D                                         2\n5 192        90 NA     B                                         4\n6 6          55 F      D                                         9\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFirst Letter of Cat’s Name\n0\n1\n1\n1\n0\n11\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90.0\n7000\n▇▁▁▁▁\n\n\nCat Age (yr)\n0\n1.00\n6.07\n4.97\n1\n3\n4\n8.5\n17\n▇▂▂▁▂\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFirst Letter of Cat’s Name\n0\n1\n1\n1\n0\n10\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nCat Age (yr)\n0\n1.00\n6.31\n5.09\n1\n3.00\n4\n9\n17\n▇▂▂▁▂\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFirst Letter of Cat’s Name\n0\n1\n1\n1\n0\n10\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nCat Age (yr)\n0\n1.00\n6.31\n5.09\n1\n3.00\n4\n9\n17\n▇▂▂▁▂\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFirst Letter of Cat’s Name\n0\n1\n1\n1\n0\n9\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nCat Age (yr)\n0\n1\n6.91\n5.34\n1\n3.0\n5\n9.5\n17\n▇▃▃▁▃\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFirst Letter of Cat’s Name\n0\n1\n1\n1\n0\n9\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nCat Age (yr)\n0\n1\n6.91\n5.34\n1\n3.0\n5\n9.5\n17\n▇▃▃▁▃\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFirst Letter of Cat’s Name\n0\n1\n1\n1\n0\n7\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nCat Age (yr)\n0\n1\n6.33\n5.10\n1\n2\n5\n9\n17\n▇▃▃▁▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/chirst/Desktop/Git/corahirst-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                         `Allowed Values`\n  &lt;chr&gt;           &lt;chr&gt;                                         &lt;chr&gt;           \n1 Height          height in centimeters                         numeric value &gt;…\n2 Weight          weight in kilograms                           numeric value &gt;…\n3 Gender          identified gender (male/female/other)         M/F/O/NA        \n4 Cat Breed       Breed of the individual's cat (Siamese /Main… S/MC/AS/P/NA    \n5 Cat Age         age in years                                  numeric value &gt;…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height      &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"1…\n$ Weight      &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender      &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F…\n$ `Cat Breed` &lt;chr&gt; \"S\", \"S\", \"AS\", \"P\", \"P\", \"S\", \"AS\", \"MC\", \"M\", \"AS\", \"AS\"…\n$ `Cat Age`   &lt;dbl&gt; 5, 7, 3, 2, 4, 9, 2, 10, 15, 3, 3, 17, 4, 1\n\nsummary(rawdata)\n\n    Height              Weight          Gender           Cat Breed        \n Length:14          Min.   :  45.0   Length:14          Length:14         \n Class :character   1st Qu.:  55.0   Class :character   Class :character  \n Mode  :character   Median :  70.0   Mode  :character   Mode  :character  \n                    Mean   : 602.7                                        \n                    3rd Qu.:  90.0                                        \n                    Max.   :7000.0                                        \n                    NA's   :1                                             \n    Cat Age      \n Min.   : 1.000  \n 1st Qu.: 3.000  \n Median : 4.000  \n Mean   : 6.071  \n 3rd Qu.: 8.500  \n Max.   :17.000  \n                 \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender `Cat Breed` `Cat Age`\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;           &lt;dbl&gt;\n1 180        80 M      S                   5\n2 175        70 O      S                   7\n3 sixty      60 F      AS                  3\n4 178        76 F      P                   2\n5 192        90 NA     P                   4\n6 6          55 F      S                   9\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nCat Breed\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90.0\n7000\n▇▁▁▁▁\n\n\nCat Age\n0\n1.00\n6.07\n4.97\n1\n3\n4\n8.5\n17\n▇▂▂▁▂\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nCat Breed\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nCat Age\n0\n1.00\n6.31\n5.09\n1\n3.00\n4\n9\n17\n▇▂▂▁▂\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nCat Breed\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nCat Age\n0\n1.00\n6.31\n5.09\n1\n3.00\n4\n9\n17\n▇▂▂▁▂\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nCat Breed\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nCat Age\n0\n1\n6.91\n5.34\n1\n3.0\n5\n9.5\n17\n▇▃▃▁▃\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCat Breed\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nCat Age\n0\n1\n6.91\n5.34\n1\n3.0\n5\n9.5\n17\n▇▃▃▁▃\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCat Breed\n0\n1\n1\n2\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nCat Age\n0\n1\n6.33\n5.10\n1\n2\n5\n9\n17\n▇▃▃▁▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nd4$'Cat Breed' &lt;- as.factor(d4$'Cat Breed')  \nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\nCat Breed\n0\n1\nFALSE\n4\nAS: 3, S: 3, MC: 2, P: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nCat Age\n0\n1\n6.33\n5.10\n1\n2\n5\n9\n17\n▇▃▃▁▂\n\n\n\n\n\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Cora Hirst Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html",
    "href": "fitting-exercise/fitting-exercise.html",
    "title": "Fitting Exercise Week 8",
    "section": "",
    "text": "#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n#install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n#install.packages(\"tidymodels\")\nlibrary(tidymodels)\n\n#install.packages(\"here\")\nlibrary(here)\n\n#install.packages(\"rsample\")\nlibrary(rsample)"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#task-1-load-the-data-and-visualize",
    "href": "fitting-exercise/fitting-exercise.html#task-1-load-the-data-and-visualize",
    "title": "Fitting Exercise Week 8",
    "section": "Task 1: load the data and visualize",
    "text": "Task 1: load the data and visualize\nThe code chunk below loads the Mavoglurant_A2121_nmpk.csv dataset and provides the structure and summary of its variables:\n\n#read in csv file\nmavoglurant_data = read.csv(here(\"fitting-exercise\", \"Mavoglurant_A2121_nmpk.csv\"))\n\n#take a look at the structure\nstr(mavoglurant_data)\n\n'data.frame':   2678 obs. of  17 variables:\n $ ID  : int  793 793 793 793 793 793 793 793 793 793 ...\n $ CMT : int  1 2 2 2 2 2 2 2 2 2 ...\n $ EVID: int  1 0 0 0 0 0 0 0 0 0 ...\n $ EVI2: int  1 0 0 0 0 0 0 0 0 0 ...\n $ MDV : int  1 0 0 0 0 0 0 0 0 0 ...\n $ DV  : num  0 491 605 556 310 237 147 101 72.4 52.6 ...\n $ LNDV: num  0 6.2 6.41 6.32 5.74 ...\n $ AMT : num  25 0 0 0 0 0 0 0 0 0 ...\n $ TIME: num  0 0.2 0.25 0.367 0.533 0.7 1.2 2.2 3.2 4.2 ...\n $ DOSE: num  25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : int  1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: int  75 0 0 0 0 0 0 0 0 0 ...\n $ AGE : int  42 42 42 42 42 42 42 42 42 42 ...\n $ SEX : int  1 1 1 1 1 1 1 1 1 1 ...\n $ RACE: int  2 2 2 2 2 2 2 2 2 2 ...\n $ WT  : num  94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 ...\n $ HT  : num  1.77 1.77 1.77 1.77 1.77 ...\n\n#summary \nsummary(mavoglurant_data)\n\n       ID             CMT             EVID              EVI2       \n Min.   :793.0   Min.   :1.000   Min.   :0.00000   Min.   :0.0000  \n 1st Qu.:832.0   1st Qu.:2.000   1st Qu.:0.00000   1st Qu.:0.0000  \n Median :860.0   Median :2.000   Median :0.00000   Median :0.0000  \n Mean   :858.8   Mean   :1.926   Mean   :0.07394   Mean   :0.1613  \n 3rd Qu.:888.0   3rd Qu.:2.000   3rd Qu.:0.00000   3rd Qu.:0.0000  \n Max.   :915.0   Max.   :2.000   Max.   :1.00000   Max.   :4.0000  \n      MDV                DV               LNDV            AMT        \n Min.   :0.00000   Min.   :   0.00   Min.   :0.000   Min.   : 0.000  \n 1st Qu.:0.00000   1st Qu.:  23.52   1st Qu.:3.158   1st Qu.: 0.000  \n Median :0.00000   Median :  74.20   Median :4.306   Median : 0.000  \n Mean   :0.09373   Mean   : 179.93   Mean   :4.085   Mean   : 2.763  \n 3rd Qu.:0.00000   3rd Qu.: 283.00   3rd Qu.:5.645   3rd Qu.: 0.000  \n Max.   :1.00000   Max.   :1730.00   Max.   :7.456   Max.   :50.000  \n      TIME             DOSE            OCC             RATE       \n Min.   : 0.000   Min.   :25.00   Min.   :1.000   Min.   :  0.00  \n 1st Qu.: 0.583   1st Qu.:25.00   1st Qu.:1.000   1st Qu.:  0.00  \n Median : 2.250   Median :37.50   Median :1.000   Median :  0.00  \n Mean   : 5.851   Mean   :37.37   Mean   :1.378   Mean   : 16.55  \n 3rd Qu.: 6.363   3rd Qu.:50.00   3rd Qu.:2.000   3rd Qu.:  0.00  \n Max.   :48.217   Max.   :50.00   Max.   :2.000   Max.   :300.00  \n      AGE            SEX             RACE              WT        \n Min.   :18.0   Min.   :1.000   Min.   : 1.000   Min.   : 56.60  \n 1st Qu.:26.0   1st Qu.:1.000   1st Qu.: 1.000   1st Qu.: 73.30  \n Median :31.0   Median :1.000   Median : 1.000   Median : 82.60  \n Mean   :32.9   Mean   :1.128   Mean   : 7.415   Mean   : 83.16  \n 3rd Qu.:40.0   3rd Qu.:1.000   3rd Qu.: 2.000   3rd Qu.: 90.60  \n Max.   :50.0   Max.   :2.000   Max.   :88.000   Max.   :115.30  \n       HT       \n Min.   :1.520  \n 1st Qu.:1.710  \n Median :1.780  \n Mean   :1.762  \n 3rd Qu.:1.820  \n Max.   :1.930  \n\n\nThere are 17 variables and 2678 observations; some variables, such as AGE, SEX, RACE, HT, and WT, are descriptors of each individual ID; that is, the values of these variables will be the same for every observation with the same ID value.\nThere are multiple observations per ID level, each with different values for variables like DV, LNDV, and TIME; this suggests that the data is comprised of multiple time-series, with observations taken from the same individuals at different points of time.\nSimilarly, it appears that participants recieved one of three different dosages of Mavoglurant, and the DV aover time after administration of each dose is given. These time series are visualized in Figure 1, with DV as the outcome and faceted by DOSE.\n\n#generate time series figure\nplot = ggplot() + geom_point(data = mavoglurant_data, aes(x = TIME, y = DV, group = ID, col = factor(DOSE))) + geom_line(data = mavoglurant_data, aes(x = TIME, y = DV, group = ID, col = factor(DOSE))) + facet_wrap(~ DOSE) +\n  scale_y_continuous(trans = \"log\")\nplot\n\n\n\n# Save Figure\nfigure_file = here(\"fitting-exercise\", \"figures\", \"time_series.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\n\nFigure 1: Initial visualization of DV time series per patient after administration of varying dosages of Mavoglurant.\n\n\n\n\nClearly, there is quite a bit of heterogeneity in these time series, through each tends to trend down more-or-less exponentially (though it seems the rate of decay is decreasing with time.) As indicated here, it appears that some indiciduals received the drug more than once, indicated by having both entries with OCC = 1 and OCC = 2. We will only be considering one dataset for each individual, and we will thus be keeping only 1 adminsitration, that is, OCC = 1."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#task-2-filtering-for-observations-with-occ-1-only",
    "href": "fitting-exercise/fitting-exercise.html#task-2-filtering-for-observations-with-occ-1-only",
    "title": "Fitting Exercise Week 8",
    "section": "Task 2: Filtering for observations with OCC = 1 only",
    "text": "Task 2: Filtering for observations with OCC = 1 only\nThe following code chunk removes all observations where OCC = 2. In all fairness, I am not removing OCC = 2 observations overtly. Instead, I am ensuring that I only keep OCC = 1 observations. This way, if we were to update the dataset with more observations from participants who received the drug a third or, even, a fourth time, we would only be analyzing one standard dataset across all participants.\n\n#filter dataframe for observations after first administration of mavoglurant only\nmavoglurant_data = mavoglurant_data %&gt;%\n  dplyr::filter(OCC == 1) # keep OCC = 1 observations\n\n#note that I am trying to get into the habit of referencing a package each time I use a function derived from it, i.e dplyr::filter(). It's a challenge to remember to do so, but it will be worth it!"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#task-3-isolating-t_0-observations-and-summing-total-dv-for-each-participant",
    "href": "fitting-exercise/fitting-exercise.html#task-3-isolating-t_0-observations-and-summing-total-dv-for-each-participant",
    "title": "Fitting Exercise Week 8",
    "section": "Task 3: Isolating \\(T_0\\) observations and summing total DV for each participant",
    "text": "Task 3: Isolating \\(T_0\\) observations and summing total DV for each participant\nWe would like to compute the total amount of drug (delivered?) for each participant by summing the DV values for each time series.\nDV is a measurment of drug concentration (presumably, drug in system, or drug delivered?). Because we are not going to use some sophisticated way of integrating to find the total drug amount (which makes me think this is total amount administered, but could also mean total amount in the blood over time), and instead we are going to sum DV over time, I’d like to get a sense of how much the length of the time series vary. If they vary dramatically, we should consider this when we draw conclusions based on total integrated DV.\nThe code chunk below generates a boxplot to compare the lengths of time series collected for participants, stratified by the dosage received.\n\n#list to store time series lengths by dose\nseries_lengths = list()\nfor(i in 1:length(levels(factor(mavoglurant_data$DOSE)))){\n  \n  lengths = mavoglurant_data %&gt;%\n    filter(DOSE == levels(factor(mavoglurant_data$DOSE))[i]) %&gt;%\n    group_by(ID) %&gt;%\n    count() %&gt;%\n    pull(n)\n\n  series_lengths[[i]] = lengths\n}\n\ndf = data.frame(lengths = c(series_lengths[[1]], series_lengths[[2]], series_lengths[[3]]),\n                dose = c(rep(\"25\", length(series_lengths[[1]])), rep(\"37.5\", length(series_lengths[[2]])), rep(\"50\", length(series_lengths[[3]]))))\n\nplot = ggplot() + geom_boxplot(data = df, aes(x = dose, y = lengths, fill = factor(dose))) #filling in boxplots looks cooler than outlining htem, in my opinion!\n\n# Save Figure\nfigure_file = here(\"fitting-exercise\", \"figures\", \"time_series_lengthsbydose.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\n\nFigure 2: Boxplot of lengths of time series of participants by dose.\n\n\n\n\nFrom Figure 2, it appears that time series collected for participants given a dose of 37.5 tend to be longer than the time series collected for participants given the other two dosages. However, the mean difference is 3 time points. If these time points occur later in the time series, when DV is significantly lower than the initial DV (Figure 1), the difference in the sum of DV values may not be too extreme; however, if these were to occur earlier in the time series compared to the other two dosages, when concentrations are high, then we’ve a reason to worry. This applies to the distribution of points collected at different times after original dose delivery, as well - if time series are long but all observations were made at a significantly longer time elapsed from time 0, then we’d have an artificially low sum. We are not going to address this issue moving forward (i.e by fitting to some function and integrating the model function under the length of the series), but I think it is particularly important to have a more visual and intuitive understanding of the issue.\nPerhaps I’ll revisit this after the model fitting portion of our exercise…\nThe code chunk below calculates the sum of DV values for each time series collected for each dosage and stores these sums in a data frame object named sums_nonzero; the “nonzero” nomer distinguishes the dataframe on the basis that all initial TIME == 0 measurements are disregarded and not included in the sum.\nFor completeness, we also create a data frame of all initial observations, named t0_obs.\nWe join these together to generate a dataframe of size 120 x 18, which we will call mavoglurant_data_cleaned. In our sums_nonzero dataframe, we have one observation per ID, where a row lists the sum total DV across all time series points (excluding TIME == 0) for an ID. We also have one observation per ID in our t0_obs dataframe, which contains the initial TIME == 0 DV observation and other defining characteristics of this first observation for each participant ID. We can use left_join(), with ID as our primary key, to join these dataframes.\n\n# excluding observations with TIME == 0 and summing all DV per ID\nsums_nonzero = mavoglurant_data %&gt;%\n  filter(TIME != 0) %&gt;%\n  summarize(y = sum(DV), .by = ID)\n\n# including only TIME == 0\nt0_obs = mavoglurant_data %&gt;%\n  filter(TIME == 0) \n\n# join the dfs\nmavoglurant_data_cleaned = left_join(t0_obs, sums_nonzero, by = \"ID\")"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#task-4-cleaning-joined-dataframe",
    "href": "fitting-exercise/fitting-exercise.html#task-4-cleaning-joined-dataframe",
    "title": "Fitting Exercise Week 8",
    "section": "Task 4: Cleaning joined dataframe",
    "text": "Task 4: Cleaning joined dataframe\nLastly, we want to remove unnecessary variables from the joined dataframe mavoglurant_data_cleaned and convert categorical variables to type factor.\nThe code chunk below selects the Y, DOSE, AGE, SEX, RACE, RATE, WT, and HT variables, and treats SEX and RACE as factors.\n\n#finish cleaning df \nmavoglurant_data_cleaned = mavoglurant_data_cleaned %&gt;%\n  select(y, DOSE, RATE, AGE, SEX, RACE, WT, HT) %&gt;%\n  mutate(SEX = factor(SEX), RACE = factor(RACE))"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-fitting",
    "href": "fitting-exercise/fitting-exercise.html#model-fitting",
    "title": "Fitting Exercise Week 8",
    "section": "Model Fitting",
    "text": "Model Fitting\n\nDOSE as a predictor of y\nHere, we know that y is our DV value at TIME == 0. We also know that DV is related to drug concentration. So, we can already anticipate there will be some relationship between the initial DOSE and y.\nThe DOSE variable is categorical and the y variable is continuous, so I will try to visualize this anticipated relationship by plotting a boxplot of y for each DOSE.\n\n# plot\nplot = ggplot() + geom_boxplot(data = mavoglurant_data_cleaned, aes(x = factor(DOSE), y = y, fill = factor(DOSE))) + geom_point(data = mavoglurant_data_cleaned, aes(x = factor(DOSE), y = y)) + labs(x = \"Dose\", y = \"DV at Time 0\")\n\nClearly, y appears to increase with DOSE. However, there is significant overlap between the points. While we can anticipate this trend is significant, we still have two goals for our model:\n\nCan we parameterize the dependence of y on DOSE with some GLM (we can use a linear model)?\nHow significant is this relationship (we can use ANOVA on our linear model)?\n\nWe would like to find a linear model to describe the relationship between y and DOSE, and we are fine to begin our fitting by looking for ordinary least squares. Thus, our model will take the form y ~ DOSE, will be linear with categorical predictor for continuous outcome, and we are fine with the lm method.\nWe can test whether the mean y predicted by DOSE is significantly different by dosage using ANOVA.\n\n### fitting a linear model \n# define recipe with recipes package\nrec_y_DOSE &lt;- \n  recipes::recipe(y ~ DOSE, \n         data = mavoglurant_data_cleaned)\n\n# choose model with parsnip package\ny_DOSE_reg = \n  parsnip::linear_reg() %&gt;% #linear regression model\n  parsnip::set_engine(\"lm\") %&gt;% #with lm method\n  parsnip::set_mode(\"regression\") #mode = regression, mode outcome is numeric\n\n# we can turn this into a workflow with workflows package\ny_DOSE_reg_WF = \n  workflows::workflow() %&gt;% #defining workflow object\n  workflows::add_model(y_DOSE_reg) %&gt;% #choosing the model for the workflow\n  workflows::add_recipe(rec_y_DOSE) #adding the recipe - which variables for outcome, predictor, any interactions...\n  \n# fitting the model with fit()\ny_DOSE_reg_model = fit(y_DOSE_reg_WF, data = mavoglurant_data_cleaned) \ntable1 = y_DOSE_reg_model %&gt;% tidy()\n\n\n### Testing if the mean ys are significantly different\n# ANOVA\nanova_y_DOSE_reg = y_DOSE_reg_model %&gt;% extract_fit_engine() %&gt;% anova() \ntable2 = anova_y_DOSE_reg %&gt;% tidy()\n\n### saving table results \n# save summary tables\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"y_DOSE_reg.rds\")\nsaveRDS(table1, file = summarytable_file)\n\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"anova_y_DOSE_reg.rds\")\nsaveRDS(table2, file = summarytable_file)\n\n\n\n\n\nTable 1: Linear regression model of y predicted by DOSE.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n323.06249\n199.048513\n1.623034\n0.1072508\n\n\nDOSE\n58.21289\n5.193797\n11.208155\n0.0000000\n\n\n\n\n\n\nThe output of tidymodel’s fit() on our linear regression by lm model provides our estimated parameters (“estimate”, Table 1), as well as the standard error (\\(\\sigma / \\sqrt{n}\\)). Before we examine the results of our ANOVA, however, we want to take a closer look at the fit of othe linear model we fed into the analysis. Below, we use the yardstick package to determine the root mean squared error and correlation coefficient of the linear regression between y and DOSE.\n\n# calculate r^2 and RMSE from y_DOSE_reg model \n## make predictions based on real DOSE observations \npredictions_y_DOSE_reg = data.frame(predictor = mavoglurant_data_cleaned$DOSE,\n                                    .pred = predict(y_DOSE_reg_model, new_data = mavoglurant_data_cleaned %&gt;% select(-y)), #use regression model to make y predictions from existing DOSE observations\n                                    observation = mavoglurant_data_cleaned$y) #bind to observed y observations\n\n## lets take a look \nplot = ggplot() + geom_point(data = predictions_y_DOSE_reg, aes(x = predictor, y = observation, color = factor(predictor))) + \n          geom_point(data = predictions_y_DOSE_reg, aes(x = predictor, y = .pred)) + \n          geom_line(data = predictions_y_DOSE_reg, aes(x = predictor, y = .pred), linetype = \"dashed\") +\n          labs(x = \"Dose\", y = \"DV sum\", title = \"Regression model prediction of DV sum by dose\")\n        \n## now lets calculate our metrics\nmetrics = yardstick::metric_set(rmse, rsq)\ntable = metrics(predictions_y_DOSE_reg, truth = observation, estimate = .pred)\n\n## add rmse and rsq to plot \nplot = plot + annotate(\"text\", y = 5000, x = 32.5, label = paste0(\"RMSE = \", round(table[1,3], 0), \"\\n rsq = \", round(table[2,3], 3)))\n\n# saving outputs\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"metrics_y_DOSE_reg.rds\")\nsaveRDS(table, file = summarytable_file)\n\nfigure_file = here(\"fitting-exercise\", \"figures\", \"metrics_y_DOSE_reg.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\n\nFigure 3: Scatterplot of total DV by Dose (colored) observed against estimated prediction (black).\n\n\n\n\n\n\n\n\nTable 2: RMSE and r-squared for model prediction of DV sum by dose.\n\n\n.metric\n.estimator\n.estimate\n\n\n\n\nrmse\nstandard\n666.4617870\n\n\nrsq\nstandard\n0.5156446\n\n\n\n\n\n\nClearly, we can see that the linear regression captured some linear relationship between dose and the sum total DV, y. There is clearly quite a bit of variance among the observed values around the estimate predicted by our linear model for each dose (colored vs black points, Figure 3), and similarly, our model fit displays quite a high RMSE (666) and low \\(r^2\\) (0.516).\nThe ANOVA does reveal that the differences in estimates from the regression model are significant, with a p-value of 2.6931057^{-20}. Let’s see if we can capture a better model by utilizing more variables as predictors.\n\n\n\n\nTable 3: Anova of regression estimated y by DOSE.\n\n\nterm\ndf\nsumsq\nmeansq\nstatistic\np.value\n\n\n\n\nDOSE\n1\n56743749\n56743749.1\n125.6227\n0\n\n\nResiduals\n118\n53300558\n451699.6\nNA\nNA"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#subsetting-and-generating-relevant-information",
    "href": "presentation-exercise/presentation-exercise.html#subsetting-and-generating-relevant-information",
    "title": "Presentation Exercise",
    "section": "Subsetting and generating relevant information",
    "text": "Subsetting and generating relevant information\nThe following codechunk processes the SEDA data to obtain three time series of the average math test scores across all subgroups for 1) Weakley County, 2) Tennessee, and 3) the US.\n\n### Weakley Country mean test scores by year\n# create subset of district scores dataset for Weakley County, TN, only \nweakley_county = scores_admindis2023 %&gt;%\n  filter(stateabb == \"TN\", sedaadminname == \"Weakley County\", subject == \"mth\" ) %&gt;% #filter for weakley county math data\n  select(\"stateabb\", \"sedaadminname\", \"subject\", \"subgroup\",  #include state, county, and subject name to ensure the filters were correct; include subgroup to filter on the poor\n        colnames(scores_admindis2023)[grep( '_ol$', colnames(scores_admindis2023))])\n\n# let's see how this looks \nhead(weakley_county) #missing 2016 data is curious. I'll have to come back to this.\n\n  stateabb  sedaadminname subject subgroup ys_mn_2016_ol ys_mn_2017_ol\n1       TN Weakley County     mth      all            NA   -0.04134371\n2       TN Weakley County     mth      ecd            NA   -0.31809371\n3       TN Weakley County     mth      nec            NA    0.13446430\n4       TN Weakley County     mth      wht            NA    0.02672900\n  ys_mn_2018_ol ys_mn_2019_ol ys_mn_2022_ol ys_mn_2023_ol ys_mn_1922_ol\n1    0.02434486    0.07254493   -0.02776205     0.1748283   -0.10030698\n2   -0.25630497   -0.22634657   -0.41122632    -0.1350673   -0.18487975\n3    0.20263028    0.26241854    0.21583720     0.3716923   -0.04658134\n4    0.06999616    0.13601488    0.04206806     0.2278517   -0.09394683\n  ys_mn_1923_ol ys_mn_2223_ol\n1    0.10228333     0.2025903\n2    0.09127931     0.2761591\n3    0.10927373     0.1558551\n4    0.09183686     0.1857837\n\n# I want to remove the measurements from 1922, 1923, and 2223\nweakley_county = weakley_county %&gt;%\n  select(-c(\"ys_mn_1922_ol\", \"ys_mn_1923_ol\", \"ys_mn_2223_ol\")) # I couldn't think of a clever way to use grep to do this, oh well!\n\n### Tenessee and US mean test scores by Year\n## US\n# First, I am creating a vector of the columns (mean scores for each state, by year) for which to take the mean across all states\nscore_column_names = colnames(scores_state2023)[grep( '_ol$', colnames(scores_state2023))]\nscore_column_names = score_column_names[-grep(\"ys_mn_1922_ol|ys_mn_1923_ol|ys_mn_2223_ol\", score_column_names)] #yes, i'm doing it this way so that if any columns had been added to the dataset, I wouldn't have to readjust the indices!\n\n# vector of US means by Year\nUS_means = scores_state2023 %&gt;%\n  filter(subgroup==\"all\") %&gt;%\n  select(colnames(scores_state2023)[grep('^ys_mn_20.*._ol$', colnames(scores_state2023))]) %&gt;%\n  colMeans(na.rm = T)\n\n\n## TN\n# vector of TN means by year \nTN_means = scores_state2023 %&gt;%\n  filter(stateabb == \"TN\") %&gt;%\n  filter( subgroup == \"all\") %&gt;%\n  select(colnames(scores_state2023)[grep('^ys_mn_20.*._ol$', colnames(scores_state2023))]) %&gt;%\n  #I figured out how to exclude the 22__ and 19__ years!\n  colMeans(na.rm=T)\n\n# now I need a data frame that puts this data into longform by subgroup; that is, I need to repeat a vector of the years scores were collected the number of times we have subgroups, i.e c(2016,2017,2018,2019...2016,2017,2018,2019...); the subgroups we have EACH the number of years that were observed, i.e (all, all, all, all...wht, wht, wht....); and the scores we have across the year columns need to be collapsed into a vector of c(subgroup 1 measurements across years, subgroup 2 measurements across years...)\n\nyears = c(2016,2017,2018,2019,2022,2023)\n\ntimeseries_weakley_county = data.frame(\"Year\" = rep(years, times = length(weakley_county$subgroup)),\n                \"Subgroup\" = rep(weakley_county$subgroup, each = length(years)),\n                \"dis_score\" = as.vector(t(weakley_county[,grep( '_ol$', colnames(weakley_county))])),  #the grep function returns the indices of the vector elements which match some pattern; adding $ to the end of my pattern returns elements that END WITH the pattern! #the t() function transposes my dataframe so that the functionas.vector, which converts a dataframe into a vector columnwise, will instead return the vector rowwise\n                \"state_score\" = rep(TN_means, times = length(weakley_county$subgroup)),\n                \"US_score\" = rep(US_means, times = length(weakley_county$subgroup)))\n\nNotice how I generated a long-form dataframe, with a column for “Year” and three columns for Weakley, Tennessee, and US scores, for ease of ggplotting. :)\nWe can see how easy it is to group our time series data in the simple plots generated by the code chunk below.\n\nplot1 = ggplot() + geom_point(data=timeseries_weakley_county, aes(x=Year, y = dis_score, col = Subgroup)) + \n  geom_line(data=timeseries_weakley_county, aes(x=Year, y = dis_score, col = Subgroup)) + \n  geom_line(data=timeseries_weakley_county, aes(x=Year, y = state_score), alpha = 0.5, linetype = \"dashed\") +\n  geom_line(data=timeseries_weakley_county, aes(x=Year, y = US_score), alpha = 0.5, linetype = \"dotted\")\n\nfigure_file = here(\"figures\",\"simple_lineplot.png\")\nggsave(filename = figure_file, plot=plot1) \n\n\n\n\n\n\nFigure 2: A simple lineplot showing the data to be plotted using AI, but stratified by subgroup\n\n\n\n\nI am going to use CoPilot to turn Figure 2 into a close rendition of Figure 1."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-fitting-continuous-outcomes",
    "href": "fitting-exercise/fitting-exercise.html#model-fitting-continuous-outcomes",
    "title": "Fitting Exercise Week 8",
    "section": "Model Fitting: continuous outcomes",
    "text": "Model Fitting: continuous outcomes\n\nDOSE as a predictor of y\nHere, we know that y is the sum of our DV values after TIME==0 for a time series. We also know that DV is related to drug concentration. So, we can already anticipate there will be some relationship between the initial DOSE and y.\nThe DOSE variable is categorical and the y variable is continuous, so I will try to visualize this anticipated relationship by plotting a boxplot of y for each DOSE.\n\n# plot\nplot = ggplot() + geom_boxplot(data = mavoglurant_data_cleaned, aes(x = factor(DOSE), y = y, fill = factor(DOSE))) + geom_point(data = mavoglurant_data_cleaned, aes(x = factor(DOSE), y = y)) + labs(x = \"Dose\", y = \"DV at Time 0\")\n\nplot\n\n\n\n\nClearly, y appears to increase with DOSE. However, there is significant overlap between the points. While we can anticipate this trend is significant, we still have two goals for our model:\n\nCan we parameterize the dependence of y on DOSE with some GLM (we can use a linear model)?\nHow significant is this relationship (we can use ANOVA on our linear model)?\n\nWe would like to find a linear model to describe the relationship between y and DOSE, and we are fine to begin our fitting by looking for ordinary least squares. Thus, our model will take the form y ~ DOSE, will be linear with categorical predictor for continuous outcome, and we are fine with the lm method.\nWe can test whether the mean y predicted by DOSE is significantly different by dosage using ANOVA.\n\n### fitting a linear model \n# define recipe with recipes package\nrec_y_DOSE &lt;- \n  recipes::recipe(y ~ DOSE, \n         data = mavoglurant_data_cleaned)\n\n# choose model with parsnip package\ny_DOSE_reg = \n  parsnip::linear_reg() %&gt;% #linear regression model\n  parsnip::set_engine(\"lm\") %&gt;% #with lm method\n  parsnip::set_mode(\"regression\") #mode = regression, mode outcome is numeric\n\n# we can turn this into a workflow with workflows package\ny_DOSE_reg_WF = \n  workflows::workflow() %&gt;% #defining workflow object\n  workflows::add_model(y_DOSE_reg) %&gt;% #choosing the model for the workflow\n  workflows::add_recipe(rec_y_DOSE) #adding the recipe - which variables for outcome, predictor, any interactions...\n  \n# fitting the model with fit()\ny_DOSE_reg_model = fit(y_DOSE_reg_WF, data = mavoglurant_data_cleaned) \ntable1 = y_DOSE_reg_model %&gt;% tidy()\n\n\n### Testing if the mean ys are significantly different\n# ANOVA\nanova_y_DOSE_reg = y_DOSE_reg_model %&gt;% extract_fit_engine() %&gt;% anova() \ntable2 = anova_y_DOSE_reg %&gt;% tidy()\n\n### saving table results \n# save summary tables\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"y_DOSE_reg.rds\")\nsaveRDS(table1, file = summarytable_file)\n\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"anova_y_DOSE_reg.rds\")\nsaveRDS(table2, file = summarytable_file)\n\n\n\n\n\nTable 1: Linear regression model of y predicted by DOSE.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n323.06249\n199.048513\n1.623034\n0.1072508\n\n\nDOSE\n58.21289\n5.193797\n11.208155\n0.0000000\n\n\n\n\n\n\nThe output of tidymodel’s fit() on our linear regression by lm model provides our estimated parameters (“estimate”, Table 1), as well as the standard error (\\(\\sigma / \\sqrt{n}\\)). Before we examine the results of our ANOVA, however, we want to take a closer look at the fit of othe linear model we fed into the analysis. Below, we use the yardstick package to determine the root mean squared error and correlation coefficient of the linear regression between y and DOSE.\n\n# calculate r^2 and RMSE from y_DOSE_reg model \n## make predictions based on real DOSE observations \npredictions_y_DOSE_reg = data.frame(predictor = mavoglurant_data_cleaned$DOSE,\n                                    .pred = predict(y_DOSE_reg_model, new_data = mavoglurant_data_cleaned %&gt;% select(-y)), #use regression model to make y predictions from existing DOSE observations\n                                    observation = mavoglurant_data_cleaned$y) #bind to observed y observations\n\n## lets take a look \nplot = ggplot() + geom_point(data = predictions_y_DOSE_reg, aes(x = predictor, y = observation, color = factor(predictor))) + \n          geom_point(data = predictions_y_DOSE_reg, aes(x = predictor, y = .pred)) + \n          geom_line(data = predictions_y_DOSE_reg, aes(x = predictor, y = .pred), linetype = \"dashed\") +\n          labs(x = \"Dose\", y = \"DV sum\", title = \"Regression model prediction of DV sum by dose\")\n        \n## now lets calculate our metrics\nmetrics = yardstick::metric_set(rmse, rsq)\ntable = metrics(predictions_y_DOSE_reg, truth = observation, estimate = .pred)\n\n## add rmse and rsq to plot \nplot = plot + annotate(\"text\", y = 5000, x = 32.5, label = paste0(\"RMSE = \", round(table[1,3], 0), \"\\n rsq = \", round(table[2,3], 3)))\n\n# saving outputs\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"metrics_y_DOSE_reg.rds\")\nsaveRDS(table, file = summarytable_file)\n\nfigure_file = here(\"fitting-exercise\", \"figures\", \"metrics_y_DOSE_reg.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\n\nFigure 3: Scatterplot of total DV by Dose (colored) observed against estimated prediction (black).\n\n\n\n\n\n\n\n\nTable 2: RMSE and r-squared for model prediction of DV sum by dose.\n\n\n.metric\n.estimator\n.estimate\n\n\n\n\nrmse\nstandard\n666.4617870\n\n\nrsq\nstandard\n0.5156446\n\n\n\n\n\n\nClearly, we can see that the linear regression captured some linear relationship between dose and the sum total DV, y. There is clearly quite a bit of variance among the observed values around the estimate predicted by our linear model for each dose (colored vs black points, Figure 3), and similarly, our model fit displays quite a high RMSE (666) and low \\(r^2\\) (0.516).\nThe ANOVA does reveal that the differences in estimates from the regression model are significant, with a p-value of 2.6931057^{-20}. Let’s see if we can capture a better model by utilizing more variables as predictors.\n\n\n\n\nTable 3: Anova of regression estimated y by DOSE.\n\n\nterm\ndf\nsumsq\nmeansq\nstatistic\np.value\n\n\n\n\nDOSE\n1\n56743749\n56743749.1\n125.6227\n0\n\n\nResiduals\n118\n53300558\n451699.6\nNA\nNA\n\n\n\n\n\n\n\n\nDOSE, RATE, AGE, SEX, RACE, HT, and WT as predictors of y\nWe’ve demonstrated that dose correlates positively with the sum total DV y; we’ve also demonstrated that there is quite a bit of heterogeneity around the estimate predicted by DOSE alone. Here, we would like to discern whether a model utilizing DOSE, RATE, AGE,SEX,RACE,HT, andWTall as predictors ofy` will provide a better fitting model. This will ultimately raise the question of whether we are overfitting by introducing too many parameters, but let’s not get ahead of ourselves!\nThe questions addressed in this section are as follows:\n\nCan we parameterize the dependence of y on DOSE, RATE, AGE, SEX, RACE, HT, and WT with some GLM (we can use a linear model)?\nHow do the RMSE and \\(r^2\\) of this model compare to our previous y ~ DOSE regression?\n\n\n### fitting a linear model \n# define recipe with recipes package\nrec_y_all &lt;- \n  recipes::recipe(y ~ DOSE + RATE + AGE + SEX + RACE + WT + HT, \n         data = mavoglurant_data_cleaned)\n\n# choose model with parsnip package\ny_all_reg = \n  parsnip::linear_reg() %&gt;% #linear regression model\n  parsnip::set_engine(\"lm\") %&gt;% #with lm method\n  parsnip::set_mode(\"regression\") #mode = regression, mode outcome is numeric\n\n# we can turn this into a workflow with workflows package\ny_all_reg_WF = \n  workflows::workflow() %&gt;% #defining workflow object\n  workflows::add_model(y_all_reg) %&gt;% #choosing the model for the workflow\n  workflows::add_recipe(rec_y_all) #adding the recipe - which variables for outcome, predictor, any interactions...\n  \n# fitting the model with fit()\ny_all_reg_model = fit(y_all_reg_WF, data = mavoglurant_data_cleaned) \ntable1 = y_all_reg_model %&gt;% tidy()\n\n### saving table results \n# save summary tables\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"y_all_reg.rds\")\nsaveRDS(table1, file = summarytable_file)\n\n\n\n\n\nTable 4: Linear regression model of sum total DV predicted by DOSE, RATE, AGE, SEX, RACE, HT, and WT.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n3399.953281\n1819.271104\n1.8688547\n0.0643032\n\n\nDOSE\n146.874595\n50.861892\n2.8877139\n0.0046733\n\n\nRATE\n-14.354042\n8.359358\n-1.7171225\n0.0887711\n\n\nAGE\n1.777301\n7.798316\n0.2279083\n0.8201406\n\n\nSEX2\n-338.676786\n215.335328\n-1.5727878\n0.1186399\n\n\nRACE2\n125.040505\n128.703178\n0.9715417\n0.3334101\n\n\nRACE7\n-398.431716\n444.324300\n-0.8967138\n0.3718300\n\n\nRACE88\n-69.064910\n242.717190\n-0.2845489\n0.7765248\n\n\nWT\n-23.703602\n6.351282\n-3.7320972\n0.0003023\n\n\nHT\n-717.053335\n1094.568090\n-0.6551016\n0.5137700\n\n\n\n\n\n\nClearly, DOSE, RATE, and WT are significant predictors of the sum total DV (Table 4).\nHowever, when we observe our metrics:\n\n# calculate r^2 and RMSE from y_DOSE_reg model \n## make predictions based on real DOSE observations \npredictions_y_all_reg = data.frame(predictor_1= mavoglurant_data_cleaned$DOSE,\n                                   .pred = predict(y_all_reg_model, new_data = mavoglurant_data_cleaned %&gt;% select(-y)), #use regression model to make y predictions from existing observations\n                                   observation = mavoglurant_data_cleaned$y) #bind to observed y observations\n                                    \n## lets take a look \nplot = ggplot() + geom_point(data = predictions_y_all_reg, aes(x = observation, y = .pred, color = factor(predictor_1))) + \n          geom_abline(linetype = \"dashed\") +\n          labs(x = \"Observed\", y = \"Predicted\", title = \"DV sums observed and predicted by regression\")\n        \n## now lets calculate our metrics\nmetrics = yardstick::metric_set(rmse, rsq)\ntable = metrics(predictions_y_all_reg, truth = observation, estimate = .pred)\n\n## add rmse and rsq to plot \nplot = plot + annotate(\"text\", y = 5000, x = 2000, label = paste0(\"RMSE = \", round(table[1,3], 0), \"\\n rsq = \", round(table[2,3], 3)))\n\n# saving outputs\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"metrics_y_all_reg.rds\")\nsaveRDS(table, file = summarytable_file)\n\nfigure_file = here(\"fitting-exercise\", \"figures\", \"metrics_y_all_reg.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\n\nFigure 4: Scatterplot of total DV observed against estimated prediction, colored by dose. Diagonal dashed line shows 1:1 corelation\n\n\n\n\n\n\n\n\nTable 5: RMSE and r-squared for model prediction of DV sum by all predictor variables.\n\n\n.metric\n.estimator\n.estimate\n\n\n\n\nrmse\nstandard\n583.0903868\n\n\nrsq\nstandard\n0.6292464\n\n\n\n\n\n\nTable 5 reveals that a model utilizing all variables as predictors of total DV sums does a slightly better job at recapitulating our observed y values, explaining 63% of the variance as opposed to the 52% explained by DOSE alone. However, if we were to penalize for the number of predictors and parameters, I’m not sure we’d agree that this model is the better-fitting! Once again, this depends on our goal - do we wish to reproduce our observations with the greatest accuracy? If we were to sample smaller subsets of our data and refit, would we still be able to reproduce all of our results with the same accuracy, and how much variance would we observe in the estimated parameters of each iteration?"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-fitting-categorical-outcome",
    "href": "fitting-exercise/fitting-exercise.html#model-fitting-categorical-outcome",
    "title": "Fitting Exercise Week 8",
    "section": "Model fitting: categorical outcome",
    "text": "Model fitting: categorical outcome\nPreviously, we formulated two linear models to predict the continuous outcome of the sum total DV for each time series, which we called y, with either initial drug DOSE alone or all predictor variables as predictors. This led us to ask an interesting question: do we care the most about accuracy, precision, and/or biological meaning in our model?\nHere, we would like to ask a similar question: can we accurately predict the sex of an individual based upon the dosage of the drug they recieved? If we fit a model with all of their other characteristic variables, will we see a greater fit, and will this greater fit be meaningful enough that we would opt for the more parameterized model?\nHere, SEX is a categorical variable we intend to predict; as such, we can use a logistic model. We will be using the default threshold of 0.5 as a cutoff to categorize our participants as eitherSEX == 1, or “success” (so it’s probably women ;)), or SEX == 2, or failure.\n\nPredicting SEX by DOSE\nHere, we’d like to see how well we can fit a logistic model to SEX by the predictor DOSE; perhaps certain dosages are more frequently assigned to one sex than the other? SEX is a binary categorical variable, and DOSE is a categorical variable with more than two levels. We will thus use a logistic regression to classify observations into either SEX category, 0 or 1.\nThe logistic regression estimates 2 parameters to produce a steep sigmoidal probability of one category of a binary categorical variable and some continuous predictor ( or some probability of success based on categorical predictors). The two parameters produce a sigmoidal relationship by assuming the odds of success increase multiplicatively for some unit increase in the predictor (that is, the natural log of the odds function of success is linear). For myself and others, a wonderful resource explaining the inutition behind this can be found in this online chapter.\nIf the predictor is continuous, we’d see something along the lines (ha, pun intended) of Figure 5:\n\n### fitting a linear model \n# define recipe with recipes package\nrecipe &lt;- \n  recipes::recipe(SEX ~ HT, \n         data = mavoglurant_data_cleaned)\n\n# choose model with parsnip package\nreg = \n  parsnip::logistic_reg() %&gt;% #linear regression model\n  parsnip::set_engine(\"glm\") %&gt;% #with glm method - which we cant use lm for a logistic model becuase OLS-like statstics don't make much sense here!\n  parsnip::set_mode(\"classification\") #mode = classification, mode outcome is categorical\n\n# we can turn this into a workflow with workflows package\nreg_WF = \n  workflows::workflow() %&gt;% #defining workflow object\n  workflows::add_model(reg) %&gt;% #choosing the model for the workflow\n  workflows::add_recipe(recipe) #adding the recipe - which variables for outcome, predictor, any interactions...\n  \nreg_model = fit(reg_WF, data = mavoglurant_data_cleaned) \ntable1 = reg_model %&gt;% tidy()\n\n###plot \nplot = ggplot() + geom_point(data = mavoglurant_data_cleaned, aes(x = HT, y = (as.numeric(SEX))-1)) + \n  stat_function(fun = function(x) exp(table1$estimate[1] + table1$estimate[2]*x)/(1+exp(table1$estimate[1] + table1$estimate[2]*x))) +\n  labs(x = \"HT\", y = \"probability of Sex 2\", title = \"Example Logistic Regression\")\n\n###save fig\nfigure_file = here(\"fitting-exercise\", \"figures\", \"logistic_example.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\n\nFigure 5: Example of a logistic regression categorizing SEX by the continuous variable HT (height?)\n\n\n\n\nNote that we can also perform a logistic regression utilizing a categorical predictor - and, here, we can treat DOSE as a categorical variable or a numeric variable. I will be treating it numerically, because increasing dosage can have biological significance which may be indicated by sexual dimorphism!\nHere, we are preforming a logistic regression to predict the probability of belonging to SEX category 2 based on the variable DOSE. Our formula will be SEX ~ DOSE, we will use a logistic_reg() model with an glm “engine”, and the mode of our model is classification as the output variable is categorical.\n\n### fitting a linear model \n\n# define recipe with recipes package\nrecipe &lt;- \n  recipes::recipe(SEX ~ DOSE, \n         data = mavoglurant_data_cleaned)\n\n# choose model with parsnip package\nreg = \n  parsnip::logistic_reg() %&gt;% #linear regression model\n  parsnip::set_engine(\"glm\") %&gt;% #with glm method - which we cant use lm for a logistic model becuase OLS-like statstics don't make much sense here!\n  parsnip::set_mode(\"classification\") #mode = classification, mode outcome is categorical\n\n# we can turn this into a workflow with workflows package\nreg_WF = \n  workflows::workflow() %&gt;% #defining workflow object\n  workflows::add_model(reg) %&gt;% #choosing the model for the workflow\n  workflows::add_recipe(recipe) #adding the recipe - which variables for outcome, predictor, any interactions...\n  \nreg_model = fit(reg_WF, data = mavoglurant_data_cleaned) \ntable1 = reg_model %&gt;% tidy()\n\n###plot \nplot = ggplot() + geom_point(data = mavoglurant_data_cleaned, aes(x = DOSE, y = (as.numeric(SEX))-1, color = SEX), alpha = 0.25) + \n  stat_function(fun = function(x) exp(table1$estimate[1] + table1$estimate[2]*x)/(1+exp(table1$estimate[1] + table1$estimate[2]*x))) +\n  labs(x = \"DOSE\", y = \"probability of Sex 2\", title = \"Logistic Regression of Sex 2 Prob by Dose\")\n\n### saving table results \n# save summary tables\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"SEX_DOSE_reg.rds\")\nsaveRDS(table1, file = summarytable_file)\n\n###save fig\nfigure_file = here(\"fitting-exercise\", \"figures\", \"logistic_sex_dose.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\n\nFigure 6: Logistic regression categorizing SEX by the variable DOSE. Opacity of point indicates number of observations for each sex at each DOSE. Black line indicates logistic regression curve.\n\n\n\n\n\n\n\n\nTable 6: Logistic regression model to categorize SEX by DOSE, success: SEX == 2.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n-0.7648181\n0.8539475\n-0.8956266\n0.3704522\n\n\nDOSE\n-0.0317544\n0.0243205\n-1.3056660\n0.1916662\n\n\n\n\n\n\nEvidently, DOSE is a pretty poor predictor (say that five times fast) of SEX (see p.values for parameter estimates, Table 6). This is certainly not helped by the potential that SEX category 1 is over-represented in the dataset (see opacity of points, Figure 6). (Perhaps mavolglurant is a drug used more by one sex than the other?)\n\n# calculate r^2 and RMSE from y_DOSE_reg model \n## make predictions based on real DOSE observations \npredictions = data.frame(predictor = mavoglurant_data_cleaned$DOSE,\n                                    .pred = predict(reg_model, new_data = mavoglurant_data_cleaned %&gt;% select(-SEX)), #use regression model to make SEX predictions from existing DOSE observations\n                                    observation = mavoglurant_data_cleaned$SEX) #bind to observed sex observations\n#plot barplot\nplot = predictions %&gt;%\n  group_by(predictor) %&gt;%\n  summarize(obs_succeses = sum(as.numeric(observation)), pred_successes = sum(as.numeric(.pred_class))) %&gt;%\n  pivot_longer(cols = c(\"obs_succeses\", \"pred_successes\"),\n               names_to = \"data\", \n               values_to = \"SEX2_Count\") %&gt;%\n  ggplot(aes(x = as.factor(predictor), y = SEX2_Count, fill = data)) + geom_bar(stat = \"identity\", position = position_dodge()) + labs(x = \"DOSE\", y = \"Count of Sex 2 participants\")\n\n\n## now lets calculate our metrics\n### accuracy\nacc = accuracy(predictions, truth = observation, estimate = .pred_class)\n\n### ROC AUC\npredictions = data.frame(predictor = mavoglurant_data_cleaned$DOSE,\n                                    predict(reg_model, new_data = mavoglurant_data_cleaned %&gt;% select(-SEX), type = \"prob\"), #use regression model to make SEX predictions from existing DOSE observations, returns probabilities of sex categories (2 cols)\n                                    observation = mavoglurant_data_cleaned$SEX) #bind to observed sex observations\n\nrocauc = roc_auc(predictions, truth = observation, .pred_1) #roc with probabiliy of sex 2 thresholds\nplot2 = roc_curve(predictions, truth = observation, .pred_1) %&gt;% #plot roc curve\n               autoplot() + annotate(\"text\", x = 0.75, y = 0.25, label = paste0(\"AUC = \", round(rocauc$.estimate, 3)))\n\n## adjust barplot with accuracy metrics \nplot = plot + annotate(\"text\", x = \"50\", y = 60, label = paste0(\"accuracy = \", round(acc$.estimate, 3)))\n\n#save figures\nfigure_file = here(\"fitting-exercise\", \"figures\", \"metrics_sex_DOSE_reg.png\")\nggsave(filename = figure_file, plot=plot) \n\nfigure_file = here(\"fitting-exercise\", \"figures\", \"roc_sex_DOSE_reg.png\")\nggsave(filename = figure_file, plot=plot2) \n\n\n\n\n\n\nFigure 7: Barplot of observed Sex 2 counts (orange) against estimated prediction (blue).\n\n\n\n\n\n\n\n\n\nFigure 8: ROC curve of sensitivity vs specificity in correctly categorizing observations by SEX from DOSE predictor, probability threshold = 0.5 .\n\n\n\n\n\nThe accuracy is actually pretty high (Figure 7) at 0.867, though our p-value really isn’t.\n\n\nPredicting SEX by DOSE, RATE, AGE, SEX, RACE, HT, WT, and y.\nThe code chunk below fits a logistic regression model to predict SEX by the predictors DOSE, RATE, AGE, SEX, RACE, HT, WT, and y.\n\n### fitting a linear model \n\n# define recipe with recipes package\nrecipe &lt;- \n  recipes::recipe(SEX ~ DOSE + RATE + AGE + y + RACE + WT + HT, \n         data = mavoglurant_data_cleaned)\n\n# choose model with parsnip package\nreg = \n  parsnip::logistic_reg() %&gt;% #linear regression model\n  parsnip::set_engine(\"glm\") %&gt;% #with glm method - which we cant use lm for a logistic model becuase OLS-like statstics don't make much sense here!\n  parsnip::set_mode(\"classification\") #mode = classification, mode outcome is categorical\n\n# we can turn this into a workflow with workflows package\nreg_WF = \n  workflows::workflow() %&gt;% #defining workflow object\n  workflows::add_model(reg) %&gt;% #choosing the model for the workflow\n  workflows::add_recipe(recipe) #adding the recipe - which variables for outcome, predictor, any interactions...\n  \nreg_model = fit(reg_WF, data = mavoglurant_data_cleaned) \ntable1 = reg_model %&gt;% tidy()\n\n###plot \nplot = ggplot() + geom_point(data = mavoglurant_data_cleaned, aes(x = HT, y = (as.numeric(SEX))-1, color = AGE, shape = RACE)) + \n  stat_function(fun = function(x) exp(table1$estimate[1] + table1$estimate[10]*x)/(1+exp(table1$estimate[1] + table1$estimate[10]*x))) +\n  labs(x = \"HT\", y = \"probability of Sex 2\", title = \"Logistic Regression, Probability of Sex 2 by all descriptors\")\n\n### saving table results \n# save summary tables\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"SEX_all_reg.rds\")\nsaveRDS(table1, file = summarytable_file)\n\n###save fig\nfigure_file = here(\"fitting-exercise\", \"figures\", \"logistic_sex_all.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\n\nFigure 9: Logistic regression categorizing SEX by all other predictor variables in the mavoglurant_data_cleaned dataframe. Point color indicates age, while point shape indicates race category. The regression line for continuous predictor height is plotted.\n\n\n\n\n\n\n\n\nTable 7: Logistic regression model to categorize SEX by all predictor variables, success: SEX == 2.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n60.2826915\n18.0502582\n3.3397135\n0.0008386\n\n\nDOSE\n-0.8490976\n191.9637237\n-0.0044232\n0.9964708\n\n\nRATE\n0.1363655\n31.9939454\n0.0042622\n0.9965992\n\n\nAGE\n0.0834182\n0.0607202\n1.3738127\n0.1694998\n\n\ny\n-0.0010377\n0.0009642\n-1.0763124\n0.2817876\n\n\nRACE2\n-1.9240578\n1.3759139\n-1.3983854\n0.1619974\n\n\nRACE7\n0.1185532\n3.8410314\n0.0308649\n0.9753773\n\n\nRACE88\n-1.4978163\n2.1944584\n-0.6825449\n0.4948945\n\n\nWT\n-0.0626504\n0.0794790\n-0.7882638\n0.4305424\n\n\nHT\n-33.1798562\n11.0835782\n-2.9936051\n0.0027570\n\n\n\n\n\n\nThe best predictors of of SEX appear to be HT, Race, AGE, and potentially y (Table 7).Dose, y, RACE==32 or 88, WT, and HT are negatively correlated with SEX==2. Biologically, if we consider women to be shorter than men on average, then maybe my choice of SEX == 2 as the “success” variable under the assumption that SEX 2 is women was fortuitous ;).\n\n# calculate r^2 and RMSE from y_DOSE_reg model \n## make predictions based on real DOSE observations \npredictions = data.frame(predictor = mavoglurant_data_cleaned$HT,\n                                    .pred = predict(reg_model, new_data = mavoglurant_data_cleaned %&gt;% select(-SEX)), #use regression model to make SEX predictions from existing DOSE observations\n                                    observation = mavoglurant_data_cleaned$SEX) #bind to observed sex observations\n#plot barplot\nobserved_successes = predictions %&gt;% select(predictor, observation) %&gt;% filter(observation==2) \npredicted_successes = predictions %&gt;% select(predictor, .pred_class) %&gt;% filter(.pred_class==2)\nfor_hist = data.frame(HT = c(observed_successes$predictor, predicted_successes$predictor),\n                      count = c(rep(\"observed\", nrow(observed_successes)), rep(\"predicted\", nrow(predicted_successes))))\n\nplot = for_hist %&gt;%\n  ggplot() + geom_histogram(aes(x = HT, y = ..density.., color = count, fill = count), alpha = 0.25, position = \"identity\", bins = 20) + \n  geom_density(aes(x = HT, y=..density.., color = count, fill = count), position = \"identity\", alpha = 0.5) +\n  labs(x = \"HT\", y = \"density of total SEX == 2 observations\", title = \"Comparison of classifications of SEX by Logistic regression model against predictor HT\")\n\n\n## now lets calculate our metrics\n### accuracy\nacc = accuracy(predictions, truth = observation, estimate = .pred_class)\n\n### ROC AUC\npredictions = data.frame(predictor = mavoglurant_data_cleaned$HT,\n                                    predict(reg_model, new_data = mavoglurant_data_cleaned %&gt;% select(-SEX), type = \"prob\"), #use regression model to make SEX predictions from existing DOSE observations, returns probabilities of sex categories (2 cols)\n                                    observation = mavoglurant_data_cleaned$SEX) #bind to observed sex observations\n\nrocauc = roc_auc(predictions, truth = observation, .pred_1) #roc with probabiliy of sex 2 thresholds\nplot2 = roc_curve(predictions, truth = observation, .pred_1) %&gt;% #plot roc curve\n               autoplot() + annotate(\"text\", x = 0.75, y = 0.25, label = paste0(\"AUC = \", round(rocauc$.estimate, 3)))\n\n## adjust barplot with accuracy metrics \nplot = plot + annotate(\"text\", x = 1.7, y = 13, label = paste0(\"accuracy = \", round(acc$.estimate, 3)))\n\n#save figures\nfigure_file = here(\"fitting-exercise\", \"figures\", \"metrics_sex_all_reg.png\")\nggsave(filename = figure_file, plot=plot) \n\nfigure_file = here(\"fitting-exercise\", \"figures\", \"roc_sex_all_reg.png\")\nggsave(filename = figure_file, plot=plot2) \n\n\n\n\n\n\nFigure 10: Barplot of observed Sex 2 counts (orange) against estimated prediction (blue).\n\n\n\n\n\n\n\n\n\nFigure 11: ROC curve of sensitivity vs specificity in correctly categorizing observations by SEX from all predictors, probability threshold = 0.5 .\n\n\n\n\nIncluding more predictors improves the accuracy of the classification model to 94% (Figure 10), and the ROC-AUC performance to 0.98 (Figure 11). This model is certainly better at classification than the previous but, once again, fails to support or predict any biological indicator of SEX by the predictors included in the study and may suffer from fitting with too many unnecessary parameters. We did discover, however, the significance of the contributions of different factors to the prediction of SEX, with HT being the most significant predictor (Table 7)."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-fit-assessment",
    "href": "fitting-exercise/fitting-exercise.html#model-fit-assessment",
    "title": "Fitting Exercise Week 8",
    "section": "Model Fit Assessment",
    "text": "Model Fit Assessment\nHere, we fit two linear models to the continuous outcome, y (as a reminder, y is the sum of DV values for a time series). The first utilises DOSE as a predictor, which we anticipate to have some correlation with the total sum of drug concentration measurments over time; the second model utilizes all predictors. Root Mean Squared Error is the metric used to optimize the model. We compare the fit of each model against the fit of a null model, predicting the mean of the observations without predictor variables.\n\nFitting the models and comparing RMSE metric\nThe following code chunk utilizes the tidymodels framework to fit a linear regression model (method = lm) with DOSE as a predictor of y:\n\n### fitting a linear model \n# define recipe with recipes package\nrec_y_DOSE &lt;- \n  recipes::recipe(y ~ DOSE, \n         data = training)\n\n# choose model with parsnip package\ny_DOSE_reg = \n  parsnip::linear_reg() %&gt;% #linear regression model\n  parsnip::set_engine(\"lm\") %&gt;% #with lm method\n  parsnip::set_mode(\"regression\") #mode = regression, mode outcome is numeric\n\n# we can turn this into a workflow with workflows package\ny_DOSE_reg_WF = \n  workflows::workflow() %&gt;% #defining workflow object\n  workflows::add_model(y_DOSE_reg) %&gt;% #choosing the model for the workflow\n  workflows::add_recipe(rec_y_DOSE) #adding the recipe - which variables for outcome, predictor, any interactions...\n  \n# fitting the model with fit()\ntrain_y_DOSE_reg_model = fit(y_DOSE_reg_WF, data = training) \ntable1 = y_DOSE_reg_model %&gt;% tidy()\n\n\n### saving table results \n# save summary tables\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"y_DOSE_reg_training.rds\")\nsaveRDS(table1, file = summarytable_file)\n\n\n\n\n\nTable 8: Linear regression model of y predicted by DOSE on training subset.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n323.06249\n199.048513\n1.623034\n0.1072508\n\n\nDOSE\n58.21289\n5.193797\n11.208155\n0.0000000\n\n\n\n\n\n\nThe output of tidymodel’s fit() on our linear regression by lm model provides our estimated parameters (“estimate”, ?@tbl-y-dose-reg_training), as well as the standard error (\\(\\sigma / \\sqrt{n}\\)). Below, we use the yardstick package to determine the root mean squared error and correlation coefficient of the linear regression between y and DOSE.\n\n# calculate r^2 and RMSE from y_DOSE_reg model \n## make predictions based on real DOSE observations \npredictions_y_DOSE_reg_train = data.frame(predictor = training$DOSE,\n                                    .pred = predict(train_y_DOSE_reg_model, new_data = training %&gt;% select(-y)), #use regression model to make y predictions from existing DOSE observations\n                                    observation = training$y) #bind to observed y observations\n\n## lets take a look \nplot = ggplot() + geom_point(data = predictions_y_DOSE_reg_train, aes(x = predictor, y = observation, color = factor(predictor))) + \n          geom_point(data = predictions_y_DOSE_reg_train, aes(x = predictor, y = .pred)) + \n          geom_line(data = predictions_y_DOSE_reg_train, aes(x = predictor, y = .pred), linetype = \"dashed\") +\n          labs(x = \"Dose\", y = \"DV sum\", title = \"Regression model prediction of DV sum by dose\")\n        \n## now lets calculate our metrics\nmetrics = yardstick::metric_set(rmse, rsq)\ntable = metrics(predictions_y_DOSE_reg_train, truth = observation, estimate = .pred)\n\n## add rmse and rsq to plot \nplot = plot + annotate(\"text\", y = 4500, x = 32.5, label = paste0(\"RMSE = \", round(table[1,3], 0), \"\\n rsq = \", round(table[2,3], 3)))\n\n# saving outputs\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"metrics_y_DOSE_reg_training.rds\")\nsaveRDS(table, file = summarytable_file)\n\nfigure_file = here(\"fitting-exercise\", \"figures\", \"metrics_y_DOSE_reg_training.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\n\nFigure 12: Scatterplot of total DV observed against dose, for training dataset. Dotted line shows linear regression predictions\n\n\n\n\n\n\n\n\nTable 9: RMSE and r-squared for model prediction of DV sum by DOSE on training data.\n\n\n.metric\n.estimator\n.estimate\n\n\n\n\nrmse\nstandard\n702.8077893\n\n\nrsq\nstandard\n0.4507963\n\n\n\n\n\n\nThe following code chunk utilizes the tidymodels framework to fit a multiple linear regression model (method = lm) with all variables as a predictor of y:\n\n### fitting a linear model \n# define recipe with recipes package\nrec_y_multiple &lt;- \n  recipes::recipe(y ~ ., \n         data = training)\n\n# choose model with parsnip package\ny_multiple_reg = \n  parsnip::linear_reg() %&gt;% #linear regression model\n  parsnip::set_engine(\"lm\") %&gt;% #with lm method\n  parsnip::set_mode(\"regression\") #mode = regression, mode outcome is numeric\n\n# we can turn this into a workflow with workflows package\ny_multiple_reg_WF = \n  workflows::workflow() %&gt;% #defining workflow object\n  workflows::add_model(y_multiple_reg) %&gt;% #choosing the model for the workflow\n  workflows::add_recipe(rec_y_multiple) #adding the recipe - which variables for outcome, predictor, any interactions...\n  \n# fitting the model with fit()\ntrain_y_multiple_reg_model = fit(y_multiple_reg_WF, data = training) \ntable1 = train_y_multiple_reg_model %&gt;% tidy()\n\n\n### saving table results \n# save summary tables\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"y_multiple_reg_training.rds\")\nsaveRDS(table1, file = summarytable_file)\n\n\n\n\n\nTable 10: Linear regression model of y predicted by multiple predictors on training subset.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n4396.7716067\n2169.637335\n2.0265007\n0.0458860\n\n\nDOSE\n55.3445105\n5.830979\n9.4914605\n0.0000000\n\n\nAGE\n-0.4174341\n9.502942\n-0.0439268\n0.9650670\n\n\nSEX2\n-568.9967188\n285.444290\n-1.9933722\n0.0494662\n\n\nWT\n-22.6398760\n7.649873\n-2.9595100\n0.0040029\n\n\nHT\n-1129.6696482\n1358.399761\n-0.8316180\n0.4079825\n\n\n\n\n\n\n\n# calculate r^2 and RMSE from y_DOSE_reg model \n## make predictions based on real DOSE observations \npredictions_y_multiple_reg_train = data.frame(predictor_1= training$DOSE,\n                                   .pred = predict(train_y_multiple_reg_model, new_data = training %&gt;% select(-y)), #use regression model to make y predictions from existing observations\n                                   observation = training$y) #bind to observed y observations\n                                    \n## lets take a look \nplot = ggplot() + geom_point(data = predictions_y_multiple_reg_train, aes(x = observation, y = .pred, color = factor(predictor_1))) + \n          geom_abline(linetype = \"dashed\") +\n          labs(x = \"Observed\", y = \"Predicted\", title = \"DV sums observed and predicted by regression\")\n        \n## now lets calculate our metrics\nmetrics = yardstick::metric_set(rmse, rsq)\ntable = metrics(predictions_y_multiple_reg_train, truth = observation, estimate = .pred)\n\n## add rmse and rsq to plot \nplot = plot + annotate(\"text\", y = 5000, x = 2000, label = paste0(\"RMSE = \", round(table[1,3], 0), \"\\n rsq = \", round(table[2,3], 3)))\n\n# saving outputs\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"metrics_y_multiple_reg_training.rds\")\nsaveRDS(table, file = summarytable_file)\n\nfigure_file = here(\"fitting-exercise\", \"figures\", \"metrics_y_multiple_reg_training.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\n\nFigure 13: Scatterplot of total DV observed against estimated prediction, colored by dose. Diagonal dashed line shows 1:1 corelation\n\n\n\n\n\n\n\n\nTable 11: RMSE and r-squared for model prediction of DV sum by all predictor variables.\n\n\n.metric\n.estimator\n.estimate\n\n\n\n\nrmse\nstandard\n627.4407539\n\n\nrsq\nstandard\n0.5622706\n\n\n\n\n\n\nWe compare the RMSE of the above two regression models to the RMSE of a null model predicting the mean y for each observation without considering DOSE.\n#null model \nnull_y_reg = null_model() %&gt;%\n  set_engine(\"parsnip\") %&gt;%\n  set_mode(\"regression\") %&gt;%\n  translate()\n\nnull_model = fit(null_y_reg, formula = y ~ 1, data = training)\n\n# calculate r^2 and RMSE from y_DOSE_reg model \n## make predictions based on real DOSE observations \npredictions_null_model = data.frame(predictor = training$DOSE,\n                                    .pred = predict(null_model, new_data = training %&gt;% select(-y)), #use regression model to make y predictions from existing DOSE observations\n                                    observation = training$y) #bind to observed y observations\n\n## lets take a look \nplot = ggplot() + geom_point(data = predictions_null_model, aes(x = predictor, y = observation, color = factor(predictor))) + \n          geom_point(data = predictions_y_DOSE_reg, aes(x = predictor, y = .pred)) + \n          geom_line(data = predictions_y_DOSE_reg, aes(x = predictor, y = .pred), linetype = \"dashed\") +\n          labs(x = \"Dose\", y = \"DV sum\", title = \"Null model prediction of DV sum, y\")\n        \n## now lets calculate our metrics\nmetrics = yardstick::metric_set(rmse)\ntable = metrics(predictions_null_model, truth = observation, estimate = .pred)\n\n## add rmse and rsq to plot \nplot = plot + annotate(\"text\", y = 4500, x = 32.5, label = paste0(\"RMSE = \", round(table[1,3], 0)))\n\n# saving outputs\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"metrics_null_model.rds\")\nsaveRDS(table, file = summarytable_file)\n\nfigure_file = here(\"fitting-exercise\", \"figures\", \"metrics_null_model.png\")\nggsave(filename = figure_file, plot=plot) \n\n\n\n\n\nFigure 14: Scatterplot of sum total DV, y, predicted by null model of training dataset.\n\n\n\n\n\n\n\n\nTable 12: RMSE for null model prediction of DV sum from model training.\n\n\n.metric\n.estimator\n.estimate\n\n\n\n\nrmse\nstandard\n948.3526\n\n\n\n\n\n\nComparing the RMSE values reported in Table 9, Table 11, and Table 14, we can see that the model with the smallest mean roots squared error is the multiple regression model. However, we can also observe that the \\(R^2\\) value is greater for the single regression model with DOSE as a predictor, which should be taken into consideration when choosing whether the model with a greater number of parameters is truly the “better” model, and not simply the model with the greatest (over?) fit.\nAssessing the model performance in a more rigorous way - against unseen data - can improve our understanding of the precision with which the model captures the behavior of the outcome variable based on the predictors. One way to do so is cross-validation.\n\n\nCross -Validation of Three Possible Models\nIn this section, we conduct a 10-fold cross-validation of each model against the training dataset according to the workflow suggest in the Introduction to TidyModels.\nThe package rsample is used here to create the resampling object - the folds of our data, or indices of random subsets, which will be used in the analysis and assessment of the models.\n\nset.seed(rngseed) #we are resampling randomly, and should set seed for reproducibility\n\n#here, we define the cross-validation folds from our training data \nfolds = rsample::vfold_cv(training, v = 10) #we would like to define 10 folds\n\nWe would like to define two workflow() objects to bundle the two linear model - formula specifications.\n\n####### workflow for single regression of y by dose ########\n# choose model with parsnip package\ny_DOSE_reg = \n  parsnip::linear_reg() %&gt;% #linear regression model\n  parsnip::set_engine(\"lm\") %&gt;% #with lm method\n  parsnip::set_mode(\"regression\") #mode = regression, mode outcome is numeric\n\n# we can turn this into a workflow with workflows package\ny_DOSE_reg_WF = \n  workflows::workflow() %&gt;% #defining workflow object\n  workflows::add_model(y_DOSE_reg) %&gt;% #choosing the model for the workflow\n  workflows::add_formula(y ~ DOSE) %&gt;%\n  fit(data = training)\n\n##########################################################################\n###### workflow for multiple regression of y by all predictors #######\n# choose model with parsnip package\ny_multiple_reg = \n  parsnip::linear_reg() %&gt;% #linear regression model\n  parsnip::set_engine(\"lm\") %&gt;% #with lm method\n  parsnip::set_mode(\"regression\") #mode = regression, mode outcome is numeric\n\n# we can turn this into a workflow with workflows package\ny_multiple_reg_WF = \n  workflows::workflow() %&gt;% #defining workflow object\n  workflows::add_model(y_multiple_reg) %&gt;% #choosing the model for the workflow\n  workflows::add_formula(y ~ .) %&gt;%\n  fit(data = training)\n\n\nset.seed(rngseed)\n\n# CV single regression, y ~ DOSE\ntrain_y_dose_rs = y_DOSE_reg_WF %&gt;%\n  tune::fit_resamples(folds)\n\ntrain_y_dose_CV_metrics = tune::collect_metrics(train_y_dose_rs) # extract metrics\n\n# CV multiple regression, y ~ all\ntrain_y_multiple_rs = y_multiple_reg_WF %&gt;%\n  tune::fit_resamples(folds)\n\ntrain_y_multiple_CV_metrics = tune::collect_metrics(train_y_multiple_rs) # extrac metrics\n\n## CV on null mdoel doesnt make sense, of course, because the mean of the observations will stay the same. I am simply going to re-fit the null model here to keep the RMSE output in one place :)\n#  refit for null model \nnull_y_reg = null_model() %&gt;% #fit null model\n  set_engine(\"parsnip\") %&gt;%\n  set_mode(\"regression\") %&gt;%\n  translate()\n\nnull_model_metrics = fit(null_y_reg, formula = y ~ 1, data = training) %&gt;% #extract RMSE\n  predict(new_data = training) %&gt;% #make predictions based on training data\n  select(.pred) %&gt;% # isolate predicted values\n  bind_cols(training$y) %&gt;% # bind predictions to training data observations\n  rename(y = \"...2\") %&gt;% #rename column containing observations \n  rmse(truth = y, estimate = .pred) #calculate\n\n#create table with CV output for each model\ntable1 = cbind(\"Predictor\" = rep(c(\"DOSE\", \"multiple\"), each = 2), rbind(train_y_dose_CV_metrics, train_y_multiple_CV_metrics)) #table comparing CV of linear regression models\ntable2 = null_model_metrics\n\n# saving outputs\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"metrics_CV_models_training.rds\")\nsaveRDS(table1, file = summarytable_file)\n\nsummarytable_file = here(\"fitting-exercise\", \"tables\", \"metrics_null_model.rds\")\nsaveRDS(table2, file = summarytable_file)\n\n\n\n\n\nTable 13: Mean RMSE and \\(R^2\\) from 10-fold cross-validation of the single and multiple linear regression models of y\n\n\n\n\n\n\n\n\n\n\n\nPredictor\n.metric\n.estimator\nmean\nn\nstd_err\n.config\n\n\n\n\nDOSE\nrmse\nstandard\n690.5397679\n10\n67.4950937\nPreprocessor1_Model1\n\n\nDOSE\nrsq\nstandard\n0.5117853\n10\n0.0592077\nPreprocessor1_Model1\n\n\nmultiple\nrmse\nstandard\n645.6909159\n10\n64.8192708\nPreprocessor1_Model1\n\n\nmultiple\nrsq\nstandard\n0.5729141\n10\n0.0685670\nPreprocessor1_Model1\n\n\n\n\n\n\n\n\n\n\nTable 14: RMSE for null model prediction of DV sum from model training.\n\n\n.metric\n.estimator\n.estimate\n\n\n\n\nrmse\nstandard\n948.3526\n\n\n\n\n\n\nThe mean RMSE of the linear regression model with DOSE as a single predictor has actually improved from 702 to 690, though it is still outperformed by the multiple linear regression model, with a mean RMSE of 645. Here, we also see that the \\(R^2\\) value of the multiple regression model has improved and also demonstrates a greater fit of the model than the single regression model (though only slightly)."
  }
]